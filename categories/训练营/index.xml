<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>训练营 on lbbniu</title><link>/categories/%E8%AE%AD%E7%BB%83%E8%90%A5/</link><description>Recent content in 训练营 on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Wed, 19 Jan 2022 08:00:00 +0800</lastBuildDate><atom:link href="/categories/%E8%AE%AD%E7%BB%83%E8%90%A5/index.xml" rel="self" type="application/rss+xml"/><item><title>第三周 递归、分治、树与图</title><link>/study/2021algorithm/week03/</link><pubDate>Mon, 29 Nov 2021 22:30:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week03/</guid><description>题目数：23
本周作业 23.合并K 个升序链表 （Hard） (要求：用分治实现，不要用堆) 半年内出题频次： Facebook 字节跳动 微软 Amazon Google Apple 滴滴 Bloomberg 快手 百度 22 26 16 44 5 8 3 4 3 2 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ // 方法一：分治 渐进时间复杂度：O(kn×logk)，空间复杂度：O(logk) func mergeKLists(lists []*ListNode) *ListNode { n := len(lists) if n == 0 { return nil } else if n == 1 { return lists[0] } else if n == 2 { return mergeTwoList(lists[0], lists[1]) } mid := n &amp;gt;&amp;gt; 1 return mergeTwoList(mergeKLists(lists[:mid]), mergeKLists(lists[mid:])) } func mergeTwoList(l1, l2 *ListNode) *ListNode { dummy := &amp;amp;ListNode{} pre := dummy for l1 !</description></item><item><title>第四周 深度优先搜索、广度优先搜索、二叉堆、二叉搜索树</title><link>/study/2021algorithm/week04/</link><pubDate>Mon, 06 Dec 2021 08:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week04/</guid><description>题目数：13
本周作业 130.被围绕的区域 （Medium）半年内出题频次： 百度 字节跳动 华为 Amazon Google 6 2 2 4 7 // 公用方向定义 var ( dx = [4]int{1, -1, 0, 0} dy = [4]int{0, 0, 1, -1} ) // 方法一：dfs 和 bfs 从上下，左右边界处理进行加速 // dfs 深度优先遍历 var n, m int func solve(board [][]byte) { if len(board) == 0 || len(board[0]) == 0 { return } n, m = len(board), len(board[0]) // 第一列和最后一列 for i := 0; i &amp;lt; n; i++ { dfs(board, i, 0) dfs(board, i, m-1) } // 第一行和最后一行 for i := 1; i &amp;lt; m - 1; i++ { dfs(board, 0, i) dfs(board, n-1, i) } for i := 0; i &amp;lt; n; i++ { for j := 0; j &amp;lt; m; j++ { if board[i][j] == 'A' { board[i][j] = 'O' } else if board[i][j] == 'O' { board[i][j] = 'X' } } } } func dfs(board [][]byte, x, y int) { if x &amp;lt; 0 || x &amp;gt;= n || y &amp;lt; 0 || y &amp;gt;= m || board[x][y] !</description></item><item><title>第五周 二分、排序</title><link>/study/2021algorithm/week05/</link><pubDate>Sun, 12 Dec 2021 08:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week05/</guid><description>题目数：20
本周作业 1011.在 D 天内送达包裹的能力 重点 （Medium）半年内出题频次：
Facebook 字节跳动 Google Amazon 14 9 3 7 // 官方题解： func shipWithinDays(weights []int, D int) int { // 确定二分查找左右边界 left, right := 0, 0 for _, w := range weights { if w &amp;gt; left { left = w } right += w } return left + sort.Search(right-left, func(x int) bool { x += left day := 1 // 需要运送的天数 sum := 0 // 当前这一天已经运送的包裹重量之和 for _, w := range weights { if sum+w &amp;gt; x { day++ sum = 0 } sum += w } return day &amp;lt;= D }) } // 官方c++版本go化 func shipWithinDays(weights []int, days int) int { left, right := weights[0], weights[0] for _, weight := range weights[1:] { if weight &amp;gt; left { left = weight } right += weight } for left &amp;lt; right { mid := (left + right) &amp;gt;&amp;gt; 1 need, cur := 1, 0 for _, weight := range weights { if cur + weight &amp;gt; mid { cur = 0 need++ } cur += weight } if need &amp;lt;= days { right = mid } else { left = mid + 1 } } return left } // 训练营 func shipWithinDays(weights []int, days int) int { low, high := weights[0], weights[0] for _, weight := range weights[1:] { if weight &amp;gt; low { low = weight } high += weight } for low &amp;lt; high { mid := (low + high) &amp;gt;&amp;gt; 1 if validate(weights, mid, days) { high = mid } else { low = mid + 1 } } return low } func validate(weights []int, weight, day int) bool { cur, curDay := 0, 1 // 注意curDay初始化为1 for _, w := range weights { if cur + w &amp;lt;= weight { cur += w } else { curDay++ cur = w } } return curDay &amp;lt;= day } 911.</description></item><item><title>第六周 贪心、动态规划</title><link>/study/2021algorithm/week06/</link><pubDate>Sat, 25 Dec 2021 08:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week06/</guid><description>题目数：14
本周作业 70.爬楼梯 （Easy）半年内出题频次：
Facebook 字节跳动 微软 Amazon 华为 百度 Google 腾讯 LinkedIn Apple 2 17 9 19 3 2 10 4 2 3 // 方法一：记忆化搜索 var mp = map[int]int{} func climbStairs(n int) int { if n &amp;lt;= 2 { return n } if k, ok := mp[n]; ok { return k } count := climbStairs(n - 1) + climbStairs(n - 2) mp[n] = count return mp[n] } // 方法二：标准动态规划 func climbStairs(n int) int { dp := make([]int, n+1) dp[1] = 1 dp[2] = 2 for i := 3; i &amp;lt;= n; i++ { dp[i] = dp[i-1] + dp[i-2] } return dp[n] } // 方法三：简化dp func climbStairs(n int) int { i, j := 1, 1 for k := 2; k &amp;lt;= n; k++ { i, j = j, i + j } return j } // 官方题解 func climbStairs(n int) int { p, q, r := 0, 0, 1 for i := 1; i &amp;lt;= n; i++ { p = q q = r r = p + q } return r } // 方法四：通项公式 func climbStairs(n int) int { sqrt5 := math.</description></item><item><title>第七周 动态规划</title><link>/study/2021algorithm/week07/</link><pubDate>Sun, 26 Dec 2021 21:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week07/</guid><description>题目数：21
本周作业 完全平方数 （Medium）
要求：完全平方数看作物品，体积为 n，价值为 1，用背包 DP 的思想解题
半年内出题频次：
Facebook 字节跳动 Amazon 腾讯 eBay Google Apple VMware 5 6 5 2 2 3 2 2 跳跃游戏 （Medium）半年内出题频次：
Facebook 字节跳动 微软 Amazon 华为 Oracle Apple 高盛集团 涂鸦智能 5 14 3 14 2 4 2 3 2 跳跃游戏 II （Medium）
要求：用动态规划解题，并与之前的贪心解法做对比
半年内出题频次：
Facebook 字节跳动 微软 Amazon 华为 Google Apple 6 5 4 17 7 3 5 最长回文子序列 （Medium）半年内出题频次：
Facebook 字节跳动 LinkedIn Amazon 2 6 6 5 二叉树中的最大路径和 （Hard）半年内出题频次：</description></item><item><title>第八周 字典树、并查集，图论算法</title><link>/study/2021algorithm/week08/</link><pubDate>Fri, 07 Jan 2022 08:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week08/</guid><description>题目数：11
本周作业 冗余连接 （Medium）半年内出题频次： Amazon 字节跳动 3 2 岛屿数量 （Medium）半年内出题频次： Facebook 字节跳动 微软 Amazon Apple Bloomberg Google LinkedIn Oracle Shopee 12 18 44 91 10 25 22 20 6 7 要求：使用并查集而非 DFS/BFS 实现
实战例题 以下为课上实战例题
第 15 课 字典树 字典树（Trie） 实现 Trie (前缀树) （Medium）半年内出题频次： Facebook 高盛集团 微软 Amazon Apple Google Twitter 3 2 3 6 2 5 9 单词搜索 II （Hard）半年内出题频次： Twitter 字节跳动 微软 Amazon Apple Google Bloomberg Cisco 2 2 17 33 4 4 3 10 思考题 系统设计：搜索提示（自动补全） 并查集 省份数量 （Medium）半年内出题频次： Twitter Apple Amazon DoorDash 高盛集团 3 3 48 8 2 被围绕的区域 （Medium）半年内出题频次： Google 字节跳动 Microsoft Amazon 华为 Apple Bloomberg 7 2 2 3 3 2 2 超市 （Easy）（AcWing） 第 16 课 图论算法 最短路 网络延迟时间 （Medium）半年内出题频次： Google 字节跳动 Amazon Microsoft 3 2 2 3 阈值距离内邻居最少的城市 （Medium）半年内出题频次： 阿里巴巴 Apple 8 2 Dijkstra 求最短路 II （Easy）（AcWing） 最小生成树 连接所有点的最小费用 （Medium）半年内出题频次： Amazon Facebook 4 2 Contributor</description></item><item><title>第九周 字符串处理、高级搜索</title><link>/study/2021algorithm/week09/</link><pubDate>Tue, 18 Jan 2022 23:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week09/</guid><description>题目数：30+
本周作业 基础问题 转换成小写字母 （Easy）半年内出题频次： Amazon 2 最后一个单词的长度 （Easy）半年内出题频次： Bloomberg 2 宝石与石头 （Easy）半年内出题频次： Amazon Facebook Google 2 2 2 字符串中的第一个唯一字符 （Easy）半年内出题频次： Facebook Bloomberg 微软 Amazon Google Apple 华为 PayPal 高盛集团 12 9 7 24 6 3 2 2 16 最长公共前缀 （Easy）半年内出题频次： Facebook 字节跳动 微软 Amazon 华为 百度 Google Bloomberg Intel Apple 13 18 7 15 2 4 3 7 2 11 字符串操作 反转字符串 （Easy）半年内出题频次： Facebook 字节跳动 微软 Amazon Google Apple Oracle 2 2 5 3 2 5 2 翻转字符串里的单词 （Medium）半年内出题频次： Facebook 字节跳动 微软 Amazon 百度 Bloomberg Apple LinkedIn Oracle 4 3 23 5 2 3 2 2 2 仅仅反转字母 （Easy）半年内出题频次： 微软 Apple 2 2 同构 / 异位词系列问题 同构字符串 （Easy）半年内出题频次： Amazon LinkedIn Google 字节跳动 7 6 4 3 有效的字母异位词 （Easy）半年内出题频次： Facebook Bloomberg 微软 Google Apple 2 13 5 2 3 字母异位词分组 （Medium）半年内出题频次： Facebook 高盛集团 微软 Amazon Apple eBay Google PayPal Apple VMware 7 14 19 34 4 4 3 3 4 5 找到字符串中所有字母异位词 （Medium）半年内出题频次： Facebook 字节跳动 微软 Amazon Google PayPal 2 2 10 8 2 2 字符串 + 动态规划 通配符匹配 （Hard）半年内出题频次： Facebook 字节跳动 微软 Google Amazon Bloomberg 6 4 6 2 5 2 二进制矩阵中的最短路径 （Medium）半年内出题频次： Facebook Google Amazon 微软 字节跳动 Bloomberg 18 7 11 3 2 2 自己选择合适的算法解答 （普通 BFS？双向 BFS？A*？）</description></item><item><title>第十周 平衡二叉树、跳跃表、树状数组与线段树、实战技巧、总结回顾</title><link>/study/2021algorithm/week10/</link><pubDate>Tue, 18 Jan 2022 23:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/week10/</guid><description>题目数：16
本周作业 尝试用语言内置的有序集合库，或写一棵平衡树，来解决 滑动窗口最大值 （Hard）半年内出题频次： Facebook 字节跳动 微软 Amazon DoorDash 高盛集团 Google 拼多多 Apple Twittter 13 9 4 41 12 9 7 2 2 2 尝试用语言内置的有序集合库，或写一棵平衡树，来解决 [邻值查找]（AcWing）( https://www.acwing.com/problem/content/138/ )（Medium） 设计跳表（选做） （Hard） 2 年内出题频次： Facebook 字节跳动 微软 Databricks 2 3 3 2 普通平衡树（选做） （Medium）（AcWing） 掉落的方块 （Hard） 1~2 年出过此题： 青牛软件 Uber 微软 Amazon Square Facebook Google - 实战例题 以下为课上实战例题
第 20 课 树状数组与线段树 树状数组 区域和检索 - 数组可修改 （Medium）半年内出题频次： Google Facebook Amazon 5 2 5 线段树 一个简单的整数问题 2 （Hard）（AcWing） 离散化 区间和的个数 （Hard）半年内出题频次： 字节跳动 Amazon 2 2 第 21 课 实战技巧、总结回顾 位运算 位 1 的个数 （Easy）半年内出题频次： Facebook 微软 Cisco 2 5 2 2 的幂 （Easy）半年内出题频次： Google Apple 英伟达 2 3 2 颠倒二进制位 （Easy）半年内出题频次： 微软 Amazon 2 2 比特位计数 （Easy）半年内出题频次： 字节跳动 Google 2 4 Pow(x, n) （Medium）半年内出题频次： Facebook LinkedIn 微软 Amazon Google Apple Bloomberg 字节跳动 高盛集团 快手 67 7 5 4 5 4 4 2 2 2 N 皇后 （Hard）半年内出题频次： Facebook 字节跳动 微软 Amazon 爱奇艺 Apple 微软 Bloomberg 2 6 7 9 4 3 4 2 解数独 （Hard）半年内出题频次： Apple Bloomberg 微软 Amazon Google DoorDash 4 2 4 8 5 27 期末串讲 天际线问题 （Hard）半年内出题频次： Facebook Google 微软 Amazon 字节跳动 Apple 5 4 3 3 2 2 包含每个查询的最小区间 1~2 年出过此题： Google Uber Apple</description></item><item><title>毕业刷新路径</title><link>/study/2021algorithm/final/</link><pubDate>Wed, 19 Jan 2022 08:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/study/2021algorithm/final/</guid><description>首先，恭喜各位同学从极客时间算法训练营毕业！
相信 70 天的刻意练习给你带来了不少改变。但是毕业后的练习还不能停止，除了课上老师讲授的题目和布置的作业，这里还有一份“左耳朵耗子”陈皓老师分享的毕业刷题路线，助你在训练营结束后持续练习。
基础 两数之和 （简单） 有效的括号 （简单） 字符串解码 （中等） LRU 缓存机制 （困难） 实现 Trie（前缀树） （中等） 添加与搜索单词 - 数据结构设计 （中等） 单词搜索 II （困难） 找不同 （简单） 单词规律 （简单） 字符串中的第一个唯一字符 （简单） 无重复字符的最长子串 （中等） 最小覆盖子串 （困难） 合并两个有序链表 （简单） 环形链表 （简单） 环形链表 II （中等） 反转链表 （简单） 反转链表 II （中等） 旋转链表 （中等） 排序链表 链表中倒数第 k 个节点 两两交换链表中的节点 （中等） 按奇偶排序数组 （简单） 按奇偶排序数组 II （简单） 有序数组的平方 （简单） 山脉数组的峰顶索引 （简单） 搜索旋转排序数组 （困难） 搜索旋转排序数组 II （中等） 寻找旋转排序数组中的最小值 （中等） 寻找旋转排序数组中的最小值 II （困难） 搜索二维矩阵 （中等） 等式方程的可满足性 （中等） 朋友圈 （中等） 账户合并 （中等） 深度优先搜索 二叉树的最大深度 （简单） 路径总和 （简单） 路径总和 II （中等） 被围绕的区域 （中等） 岛屿数量 （中等） 岛屿的最大面积 （中等） 在二叉树中分配硬币 （中等） 回溯 括号生成 （中等） N 皇后 （困难） N 皇后 II （困难） 解数独 （中等） 不同路径 III （困难） 单词搜索 （中等） 分治 搜索二维矩阵 II （中等） 合并 K 个排序链表 （中等） 为运算表达式设计优先级 （中等） 给表达式添加运算符 （困难） 数组中的第 K 个最大元素 （中等） 最接近原点的 K 个点 （中等） 鸡蛋掉落 （困难） 动态规划 使用最小花费爬楼梯 （简单） 爬楼梯 （简单） 不同路径 （简单） 最小路径和 （中等） 最大子序和 （简单） 乘积最大子数组 （中等） 买卖股票的最佳时机 （简单） 买卖股票的最佳时机 II （简单） 买卖股票的最佳时机 III （困难） 买卖股票的最佳时机 IV （困难） 最佳买卖股票时机含冷冻期 （中等） 买卖股票的最佳时机含手续费 （中等） 零钱兑换 （中等） 零钱兑换 II （中等） 编辑距离 （困难） 不同的子序列 （困难） 柱状图中最大的矩形 （困难） 最大矩形 （困难） 最大正方形 （中等） 最低票价 （中等） 区域和检索 - 数组不可变 （简单） 二维区域和检索 - 矩阵不可变 （中等） 最长上升子序列 （中等） 鸡蛋掉落 （困难）</description></item></channel></rss>