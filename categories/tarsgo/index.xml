<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TarsGo on lbbniu</title><link>/categories/tarsgo/</link><description>Recent content in TarsGo on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Tue, 06 Feb 2024 23:43:47 +0800</lastBuildDate><atom:link href="/categories/tarsgo/index.xml" rel="self" type="application/rss+xml"/><item><title>写给Go开发者的Tars教程-支持超时传递</title><link>/2024/01/14/tarsgo-timeout-delivery/</link><pubDate>Sun, 14 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/14/tarsgo-timeout-delivery/</guid><description>本篇为【写给go开发者的Tars教程】系列第六篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status 第六篇：超时控制 第六篇：续集支持超时传递
本系列将持续更新，欢迎关注👏获取实时通知
接上篇超时控制中提到TarsGo并不支持超时传递，下面我们将对TarsGo进行改造使其支持超时传递能力。
回顾 超时传递 当一个正常的请求会涉及到多个服务的调用时，从源头开始一个服务端不仅为上游服务提供服务，也作为下游的客户端
如上的链路，如果当请求到达某一服务时，对于服务A来说已经超时了，那么就没有必要继续把请求传递下去了。这样可以最大限度的避免后续服务的资源浪费，提高系统的整体性能。
下面将为TarsGo实现了这一特性，需要对TarsGo框架的客户端和服务端分别进行改造，改造完成后我们业务层要做的就是不断的把context.Context传下去，如下代码所示：
// 服务A func main(){ ctx, cancel = context.WithTimeout(context.Background(), 3*time.Second) defer cancel() client.ServiceB(ctx) } // 服务B func ServiceB(ctx context.Context){ client.ServiceC(ctx) } // 服务C func ServiceC(ctx context.Context){ client.ServiceD(ctx) } // 服务D func ServiceD(ctx context.Context){ done := make(chan int, 1) go func() { // 业务逻辑 done &amp;lt;- 1 // 处理完成 }() select { case &amp;lt;-ctx.Done(): // 处理超时 case &amp;lt;- done: // 处理完成 } } 在每一次的context.</description></item><item><title>写给Go开发者的Tars教程-安全</title><link>/2024/01/11/tarsgo-auth/</link><pubDate>Thu, 11 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/11/tarsgo-auth/</guid><description>本篇为【写给go开发者的Tars教程】系列第七篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status 第六篇：超时控制 第七篇：安全 👈
本系列将持续更新，欢迎关注 👏 获取实时通知
使用 TLS 安全传输数据 什么是 SSL/TLS SSL 包含记录层（Record Layer）和传输层[1]，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509[2]认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密匙作为会话密匙（Session key[3]）。这个会谈密匙是用来将通信两方交换的资料做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。
&amp;mdash; 维基百科
SSL（Secure Sockets Layer）/TLS（Transport Layer Security）是网络通信中用于实现安全传输的协议。它们提供了加密、身份验证和数据完整性的功能，以确保在客户端和服务器之间传输的数据是安全的。
加密数据： SSL/TLS使用加密算法对数据进行加密，防止在传输过程中被窃取或篡改，确保数据的机密性。
身份验证：
单向认证： 仅服务器需要验证其身份，客户端验证服务器的证书，确保连接的合法性。 双向认证： 除了服务器验证客户端，客户端还提供证书供服务器验证，增加了对双方身份的确认。 数据完整性： 使用哈希函数等机制确保数据在传输过程中未被篡改，维护数据的完整性。
SSL/TLS广泛用于加密网页浏览、电子邮件传输和其他网络应用，通过提供安全通信，防止中间人攻击和保护用户隐私。选择单向或双向认证取决于具体需求，平衡了安全性和复杂性的考虑。
单向认证 单向认证是SSL/TLS协议中的一种身份验证方式，主要涉及服务器向客户端证明其身份的过程。在单向认证中，只有服务器需要提供数字证书，而客户端不需要提供自己的证书。以下是单向认证的详细讲解：
服务器提供数字证书： 服务器在通信开始前，需要向客户端提供一个数字证书。数字证书通常由受信任的证书颁发机构（CA）签发，证明服务器的身份。证书包含了服务器的公钥以及与之相关的私钥，以确保客户端能够验证其合法性。
客户端验证服务器证书： 客户端在接收到服务器的数字证书后，使用事先保存的CA公钥来验证证书的签名。如果验证成功，客户端可以确认服务器的身份是合法的，并且可以信任该服务器。
建立安全通信： 一旦服务器的身份得到确认，客户端和服务器之间的通信就可以开始。SSL/TLS协议使用服务器的公钥对数据进行加密，确保在传输过程中数据的机密性。同时，使用数字签名和哈希函数来保证数据的完整性。
完成握手过程： 整个单向认证过程完成后，SSL/TLS握手阶段结束，安全通信通道建立起来，双方可以安全地进行数据传输。
总的来说，单向认证确保了客户端与合法服务器的安全通信，适用于大多数互联网应用场景。
✨ 证书组成 在生产环境通常是生成一个 CA 根证书，然后使用 CA 根证书去签名多个服务端的证书。这种方式可以一次管理多个证书，也比较贴近真实情况，当然也可以用来做证书过期、更新等试验，缺点是操作起来略微麻烦一点。
rootCA.key：ca 机构的私钥，用来给服务端签发证书
rootCA.crt：ca 的证书，用来给客户端验证服务端证书
server.key：RSA 的私钥，用来进行数字签名
server.crt：由 ca 签发的服务端证书
单向认证-根证书模式
服务端全局配置：
我们只需要添加SSL/TLS相关配置，程序代码无需任何改动
&amp;lt;tars&amp;gt; &amp;lt;application&amp;gt; &amp;lt;server&amp;gt; # ... # 服务器public证书 cert=ssl/server.</description></item><item><title>写给Go开发者的Tars教程-超时控制</title><link>/2024/01/10/tarsgo-timeout/</link><pubDate>Wed, 10 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/10/tarsgo-timeout/</guid><description>本篇为【写给go开发者的Tars教程】系列第六篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status 第六篇：超时控制
本系列将持续更新，欢迎关注👏获取实时通知
导言
一个合理的超时时间是非常必要的，它能提高用户体验，提高服务器的整体性能，是服务治理的常见手段之一
为什么要设置超时 用户体验：很多RPC都是由用户侧发起，如果请求不设置超时时间或者超时时间不合理，会导致用户一直处于白屏或者请求中的状态，影响用户的体验
资源利用：一个RPC会占用两端（服务端与客户端）端口、cpu、内存等一系列的资源，不合理的超时时间会导致RPC占用的资源迟迟不能被释放，因而影响服务器稳定性
综上，一个合理的超时时间是非常必要的。在一些要求更高的服务中，我们还需要针对DNS解析、连接建立，读、写等设置更精细的超时时间。除了设置静态的超时时间，根据当前系统状态、服务链路等设置自适应的动态超时时间也是服务治理中一个常见的方案。
客户端的超时 连接超时 还记得我们怎么在客户端创建的么？
comm := tars.GetCommunicator() client := new(order.OrderManagement) obj := &amp;quot;Test.OrderServer.OrderObj@tcp -h 127.0.0.1 -p 8080 -t 60000&amp;quot; comm.StringToProxy(obj, client) // order, err := client.GetOrderWithContext(ctx, &amp;quot;1&amp;quot;) // if err != nil { // panic(err) // } 如果目标地址tcp -h 127.0.0.1 -p 8080 -t 60000无法建立连接，comm.StringToProxy会出现错误或panic么？这里直接放结论：不会的，TarsGo只有在发生RPC调用时才会创建连接，并不会阻塞在这里，如果RPC调用时连接没有创建成功会在RPC调用中报错。
如果我们想控制连接创建时的超时时间该怎么做呢？
可以修改Tars服务的启动配置文件对应的配置项来完成，目前也只能通过配置文件进配置。默认链接超时时间为3000毫秒，如下所示配置值为毫秒时间戳。
&amp;lt;tars&amp;gt; &amp;lt;application&amp;gt; &amp;lt;client&amp;gt; # 默认值为3000毫秒 clientdialtimeout=3000 &amp;lt;/client&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/tars&amp;gt; 服务调用的超时 和上面连接超时的配置类似。也可以通过配置文件进行配置。如下所示：
&amp;lt;tars&amp;gt; &amp;lt;application&amp;gt; &amp;lt;client&amp;gt; # 默认值为3000毫秒 async-invoke-timeout=3000 &amp;lt;/client&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/tars&amp;gt; 同时XXXWithContext服务调用的第一个参数均是context.</description></item><item><title>写给Go开发者的Tars教程-context/status</title><link>/2024/01/09/tarsgo-context/</link><pubDate>Tue, 09 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/09/tarsgo-context/</guid><description>本篇为【写给go开发者的Tars教程】系列第五篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
本系列将持续更新，欢迎关注👏获取实时通知
导语
和在普通HTTP请求中一样，TarsGo提供了在每一次RPC中携带上下文的结构：context和status。在Go语言中，它与context.Context紧密结合，帮助我们实现服务端与客户端之间互相传递信息。其中status主要用于框架底层传递一些框架特性相关的数据。
什么是 context？ TarsGo 的 context和status的简单理解，就是 HTTP Header 中的 key-value 对
context和status 都是以 key-value 的形式存储数据的，其中 key 和 value都是 string 类型。 context和status 使得 client 和 server 能够为对方提供关于本次调用的一些信息，就像一次HTTP请求的Request Header和Response Header一样 HTTP Header 的生命周期是一次 HTTP 请求，那么 context和status 的生命周期就是一次 RPC 调用 context和status 创建 🌲 直接使用make即可： context := make(map[string]string) status := make(map[string]string) 🌲 直接使用map初始化方式： context := map[string]string{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;} status := map[string]string{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;} context和status 发送和接受 让我们再次回顾下tars文件和生成出来的client与server端的接口
module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; type OrderManagement struct { servant m.</description></item><item><title>写给go开发者的Tars教程-错误处理</title><link>/2024/01/08/tarsgo-errors/</link><pubDate>Mon, 08 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/08/tarsgo-errors/</guid><description>本篇为【写给go开发者的Tars教程】系列第四篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理
本系列将持续更新，欢迎关注👏获取实时通知
基本错误处理 首先回顾下tars文件和生成出来的client与server端的接口
module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; type OrderManagement struct { servant m.Servant } func (obj *OrderManagement) GetOrder(orderId string, opts ...map[string]string) (Order, error) { return obj.GetOrderWithContext(context.Background(), orderId, opts...) } func (obj *OrderManagement) GetOrderWithContext(tarsCtx context.Context, orderId string, opts ...map[string]string) (ret Order, err error) { // .</description></item><item><title>写给go开发者的Tars教程-拦截器</title><link>/2024/01/07/tarsgo-middleware/</link><pubDate>Sun, 07 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/07/tarsgo-middleware/</guid><description>本篇为【写给go开发者的Tars教程】系列第三篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器
TarsGo的拦截器和其他框架的拦截器（也称middleware）作用是一样的。利用拦截器我们可以在不侵入业务逻辑的前提下修改或者记录服务端或客户端的请求与响应，利用拦截器我们可以实现诸如日志记录、权限认证、限流、链路追踪等诸多功能。拦截器可以分别应用在服务端和客户端，所以TarsGo总共为我们提供了多种拦截器，下面我们进行一一介绍。
服务端拦截器（过滤器） 处理前后拦截器（过滤器） 拦截器定义如下：
// Dispatch server side Dispatch type Dispatch func(context.Context, interface{}, *requestf.RequestPacket, *requestf.ResponsePacket, bool) error // ServerFilter is used for add Filter for server dispatcher ,for implementing plugins like opentracing. type ServerFilter func(ctx context.Context, d Dispatch, f interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) 注册服务端拦截器的方法如下：
func RegisterServerFilter(f ServerFilter) // 注册服务端拦截器，只能注册一个 func RegisterPreServerFilter(f ServerFilter) // 注册服务端处理前拦截器，可多个 func RegisterPostServerFilter(f ServerFilter) // 注册服务端处理后拦截器，可多个 不推荐上面三种注册方法来注册拦截件，将在1.5版本后彻底废弃移除，推荐使用下面介绍的中间件实现对应的逻辑。
示例：
// 注册服务端过滤器 tars.RegisterServerFilter(func(ctx context.Context, d tars.</description></item><item><title>写给go开发者的Tars教程-Tars协议基础</title><link>/2023/06/18/tarsgo-protocol/</link><pubDate>Sun, 18 Jun 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/06/18/tarsgo-protocol/</guid><description>简介 Tars这个名字取自于电影&amp;quot;星际穿越&amp;quot;中的机器人，它是基于名字服务使用Tars协议的高性能RPC开发框架，配套一体化的运营管理平台，并通过伸缩调度，实现运维半托管服务。
Tars是腾讯从2008年到今天一直在使用的后台逻辑层的统一应用框架TAF（Total Application Framework），目前支持C++、Java、PHP、Nodejs、Go语言。该框架为用户提供了涉及到开发、运维、以及测试的一整套解决方案，帮助一个产品或者服务快速开发、部署、测试、上线。 它集可扩展协议编解码、高性能RPC通信框架、名字路由与发现、发布监控、日志统计、配置管理等于一体，通过它可以快速用微服务的方式构建自己的稳定可靠的分布式应用，并实现完整有效的服务治理。
目前该框架在腾讯内部，各大核心业务都在使用，颇受欢迎，基于该框架部署运行的服务节点规模达到上万个。
支持平台 目前运行的操作系统平台如下：
Linux
Mac(&amp;gt;=2.1.0 support)
支持语言 目前支持的开发语言如下：
C++
Java
Nodejs
PHP
Go
版本管理 Tars由多种模块组成, 分散在多个仓库中, 并且基础框架版本和语言版本可以独立发展, 鉴于此, 从2.1.0版本开始, 框架的版本TAG打在TarsFramework仓库上, 不再体现在Tars这个仓库上.
Tars IDL 所谓序列化通俗来说就是把内存的一段数据转化成二进制并存储或者通过网络传输，而读取磁盘或另一端收到后可以在内存中重建这段数据
1、tars协议是跨语言跨平台的序列化协议。
2、tars协议本身也可以被用于非RPC场景，如存储
json、 xml都是一种序列化的方式，只是他们不需要提前预定义idl，且具备可读性，当然他们传输的体积也因此较大，可以说是各有优劣。
关键字 void,struct,bool,byte,short,int,double,float,long,string,vector,map,key,routekey,module,interface,out,require,optional,false,true,enum,const 注释 采用 c++的注释规范：
//表示注释一行 /**/表示注释范围中的所有代码。 基本类型 基本类型会涉及到不同语言和编码方式，这里只整理tars和go类型对照表
.tars Type Go Type Notes void 函数无返回值 只能在函数的返回值表示 bool bool 布尔类型 byte int8 有符号字符 unsigned byte uint8 无符号字符 short int16 有符号短整型 unsigned short uint16 无符号短整形 int int32 有符号整型 unsigned int uint32 无符号整形 long int64 有符号长整型 float float32 32位浮点数 double float64 64位浮点数 string string 字符串 复杂类型 .</description></item><item><title>写给Go开发者的Tars教程-通信模式</title><link>/2023/06/18/tarsgo-rpc/</link><pubDate>Sun, 18 Jun 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/06/18/tarsgo-rpc/</guid><description>本篇为【写给Go开发者的Tars教程系列】第二篇
第一篇：Tars协议基础 第二篇：通信模式 上一篇介绍了如何编写 Tars 的 idl，并使用 idl 生成了 TarsGo RPC 的代码，现在来看看如何编写客户端和服务端的代码
Tars 示例 IDL module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; 生成 go 协议编解码代码 tars2go -outdir=. \ -module=github.com/lbbniu/TarsGo-tutorial \ proto/order.tars order ├── order.go └── OrderManagement.tars.go proto └── order.tars server 实现 服务端开发 1、由 Tars 文件生成的 Go 代码中包含了 interface 的接口定义，它和我们定义的 idl 是吻合的</description></item><item><title>使用docker搭建 tars 开发环境</title><link>/2022/02/15/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BA-tars-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 15 Feb 2022 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2022/02/15/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BA-tars-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid><description>docker pull tarscloud/framework docker run -d --net=host -e MYSQL_HOST=xxxxx -e MYSQL_ROOT_PASSWORD=xxxxx \ -eREBUILD=false -eINET=eth0 -eSLAVE=false \ -v/data/tars:/data/tars \ -v/etc/localtime:/etc/localtime \ tarscloud/framework # custom docker run -d -eMYSQL_HOST=192.168.1.10 -eMYSQL_USER=root -p 3000:3000 -p 18993:18993 \ -eMYSQL_ROOT_PASSWORD=lbbniu@yang0321 \ -eREBUILD=true -eINET=eth0 -eSLAVE=false \ --name tarsframework \ tarscloud/framework docker run -d -eMYSQL_HOST=10.14.166.155 -eMYSQL_USER=root -p 3000:3000 \ -eMYSQL_ROOT_PASSWORD=123456 \ -eREBUILD=false -eINET=eth0 -eSLAVE=false \ --name tarsframework \ tarscloud/framework docker run -ti --rm tarscloud/framework bash docker pull tarscloud/tars docker run -d --net=host -e MYSQL_HOST=xxxxx -e MYSQL_ROOT_PASSWORD=xxxxx \ -eREBUILD=false -eINET=eth0 -eSLAVE=false \ -v/data/tars:/data/tars \ -v/etc/localtime:/etc/localtime \ tarscloud/tars # custom docker run -d --net=host -e MYSQL_HOST=xxxxx -e MYSQL_ROOT_PASSWORD=xxxxx \ -eREBUILD=false -eINET=eth0 -eSLAVE=false \ -v/data/tars:/data/tars \ -v/etc/localtime:/etc/localtime \ tarscloud/tars docker run -d \ --name=tars-framework \ --net=host \ -e MYSQL_HOST=&amp;quot;10.</description></item></channel></rss>