<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>容器化 on lbbniu</title><link>/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/</link><description>Recent content in 容器化 on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Thu, 25 Nov 2021 13:30:16 +0800</lastBuildDate><atom:link href="/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Tars服务容器化</title><link>/cloud-native/tars%E5%AE%B9%E5%99%A8%E5%8C%96/</link><pubDate>Thu, 25 Nov 2021 13:30:16 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/tars%E5%AE%B9%E5%99%A8%E5%8C%96/</guid><description>tars容器化逻辑 tars 协议文件 module tars { struct AdapterConf{ 0 require string servant; 1 require string endpoint; 2 optional string protocol; 3 optional int maxConns; 4 optional int threadNum; 5 optional int queueCap; 6 optional int queueTimeout; }; struct onStartupReq{ 0 require string nodeName; 1 require string application; 2 require string server; 3 optional string setID; 4 optional vector&amp;lt;AdapterConf&amp;gt; adapters; 5 optional bool disableFlow; 6 optional string State = &amp;quot;active&amp;quot;; 7 optional string Version; 8 optional string templateName; 9 optional string serverType; }; struct onPrestopReq{ 0 require string nodeName; 1 optional string application; 2 optional string server; }; struct keepAliveReq{ 0 require string nodeName; 1 require string state; // inactive or active 2 optional string application; 3 optional string server; }; struct RegisterMetricsReq{ 0 require string nodeName; 1 require string application; 2 require string server; 3 require int metricsPort; }; struct GetMetricsAdaptersReq{ 0 optional map&amp;lt;string, string&amp;gt; filter; // enable in feature }; struct MetricsAdapterInfo{ 0 optional vector&amp;lt;string&amp;gt; targets; 1 optional map&amp;lt;string, string&amp;gt; labels; }; interface tarsregistry { void onStartup(onStartupReq req); void onPrestop(onPrestopReq req); void keepAlive(keepAliveReq req); void registerMetrics(RegisterMetricsReq req); void getMetricsAdapters(GetMetricsAdaptersReq req, out vector&amp;lt;MetricsAdapterInfo&amp;gt; rsp); }; }; onStartup -- 增加 t_node_info 记录 insert into t_node_info(node_name, node_obj, endpoint_ip, endpoint_port, last_reg_time, last_heartbeat, setting_state, present_state) values(?</description></item></channel></rss>