<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tarsgo on lbbniu</title><link>/tags/tarsgo/</link><description>Recent content in tarsgo on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Sun, 14 Jan 2024 15:20:00 +0800</lastBuildDate><atom:link href="/tags/tarsgo/index.xml" rel="self" type="application/rss+xml"/><item><title>写给Go开发者的Tars教程-支持超时传递</title><link>/2024/01/14/tarsgo-timeout-delivery/</link><pubDate>Sun, 14 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/14/tarsgo-timeout-delivery/</guid><description>本篇为【写给go开发者的Tars教程】系列第六篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status 第六篇：超时控制 第六篇：续集支持超时传递
本系列将持续更新，欢迎关注👏获取实时通知
接上篇超时控制中提到TarsGo并不支持超时传递，下面我们将对TarsGo进行改造使其支持超时传递能力。
回顾 超时传递 当一个正常的请求会涉及到多个服务的调用时，从源头开始一个服务端不仅为上游服务提供服务，也作为下游的客户端
如上的链路，如果当请求到达某一服务时，对于服务A来说已经超时了，那么就没有必要继续把请求传递下去了。这样可以最大限度的避免后续服务的资源浪费，提高系统的整体性能。
下面将为TarsGo实现了这一特性，需要对TarsGo框架的客户端和服务端分别进行改造，改造完成后我们业务层要做的就是不断的把context.Context传下去，如下代码所示：
// 服务A func main(){ ctx, cancel = context.WithTimeout(context.Background(), 3*time.Second) defer cancel() client.ServiceB(ctx) } // 服务B func ServiceB(ctx context.Context){ client.ServiceC(ctx) } // 服务C func ServiceC(ctx context.Context){ client.ServiceD(ctx) } // 服务D func ServiceD(ctx context.Context){ done := make(chan int, 1) go func() { // 业务逻辑 done &amp;lt;- 1 // 处理完成 }() select { case &amp;lt;-ctx.Done(): // 处理超时 case &amp;lt;- done: // 处理完成 } } 在每一次的context.</description></item><item><title>写给Go开发者的Tars教程-安全</title><link>/2024/01/11/tarsgo-auth/</link><pubDate>Thu, 11 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/11/tarsgo-auth/</guid><description>本篇为【写给go开发者的Tars教程】系列第七篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status 第六篇：超时控制 第七篇：安全 👈
本系列将持续更新，欢迎关注 👏 获取实时通知
使用 TLS 安全传输数据 什么是 SSL/TLS SSL 包含记录层（Record Layer）和传输层[1]，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509[2]认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密匙作为会话密匙（Session key[3]）。这个会谈密匙是用来将通信两方交换的资料做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。
&amp;mdash; 维基百科
SSL（Secure Sockets Layer）/TLS（Transport Layer Security）是网络通信中用于实现安全传输的协议。它们提供了加密、身份验证和数据完整性的功能，以确保在客户端和服务器之间传输的数据是安全的。
加密数据： SSL/TLS使用加密算法对数据进行加密，防止在传输过程中被窃取或篡改，确保数据的机密性。
身份验证：
单向认证： 仅服务器需要验证其身份，客户端验证服务器的证书，确保连接的合法性。 双向认证： 除了服务器验证客户端，客户端还提供证书供服务器验证，增加了对双方身份的确认。 数据完整性： 使用哈希函数等机制确保数据在传输过程中未被篡改，维护数据的完整性。
SSL/TLS广泛用于加密网页浏览、电子邮件传输和其他网络应用，通过提供安全通信，防止中间人攻击和保护用户隐私。选择单向或双向认证取决于具体需求，平衡了安全性和复杂性的考虑。
单向认证 单向认证是SSL/TLS协议中的一种身份验证方式，主要涉及服务器向客户端证明其身份的过程。在单向认证中，只有服务器需要提供数字证书，而客户端不需要提供自己的证书。以下是单向认证的详细讲解：
服务器提供数字证书： 服务器在通信开始前，需要向客户端提供一个数字证书。数字证书通常由受信任的证书颁发机构（CA）签发，证明服务器的身份。证书包含了服务器的公钥以及与之相关的私钥，以确保客户端能够验证其合法性。
客户端验证服务器证书： 客户端在接收到服务器的数字证书后，使用事先保存的CA公钥来验证证书的签名。如果验证成功，客户端可以确认服务器的身份是合法的，并且可以信任该服务器。
建立安全通信： 一旦服务器的身份得到确认，客户端和服务器之间的通信就可以开始。SSL/TLS协议使用服务器的公钥对数据进行加密，确保在传输过程中数据的机密性。同时，使用数字签名和哈希函数来保证数据的完整性。
完成握手过程： 整个单向认证过程完成后，SSL/TLS握手阶段结束，安全通信通道建立起来，双方可以安全地进行数据传输。
总的来说，单向认证确保了客户端与合法服务器的安全通信，适用于大多数互联网应用场景。
✨ 证书组成 在生产环境通常是生成一个 CA 根证书，然后使用 CA 根证书去签名多个服务端的证书。这种方式可以一次管理多个证书，也比较贴近真实情况，当然也可以用来做证书过期、更新等试验，缺点是操作起来略微麻烦一点。
rootCA.key：ca 机构的私钥，用来给服务端签发证书
rootCA.crt：ca 的证书，用来给客户端验证服务端证书
server.key：RSA 的私钥，用来进行数字签名
server.crt：由 ca 签发的服务端证书
单向认证-根证书模式
服务端全局配置：
我们只需要添加SSL/TLS相关配置，程序代码无需任何改动
&amp;lt;tars&amp;gt; &amp;lt;application&amp;gt; &amp;lt;server&amp;gt; # ... # 服务器public证书 cert=ssl/server.</description></item><item><title>写给Go开发者的Tars教程-超时控制</title><link>/2024/01/10/tarsgo-timeout/</link><pubDate>Wed, 10 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/10/tarsgo-timeout/</guid><description>本篇为【写给go开发者的Tars教程】系列第六篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status 第六篇：超时控制
本系列将持续更新，欢迎关注👏获取实时通知
导言
一个合理的超时时间是非常必要的，它能提高用户体验，提高服务器的整体性能，是服务治理的常见手段之一
为什么要设置超时 用户体验：很多RPC都是由用户侧发起，如果请求不设置超时时间或者超时时间不合理，会导致用户一直处于白屏或者请求中的状态，影响用户的体验
资源利用：一个RPC会占用两端（服务端与客户端）端口、cpu、内存等一系列的资源，不合理的超时时间会导致RPC占用的资源迟迟不能被释放，因而影响服务器稳定性
综上，一个合理的超时时间是非常必要的。在一些要求更高的服务中，我们还需要针对DNS解析、连接建立，读、写等设置更精细的超时时间。除了设置静态的超时时间，根据当前系统状态、服务链路等设置自适应的动态超时时间也是服务治理中一个常见的方案。
客户端的超时 连接超时 还记得我们怎么在客户端创建的么？
comm := tars.GetCommunicator() client := new(order.OrderManagement) obj := &amp;quot;Test.OrderServer.OrderObj@tcp -h 127.0.0.1 -p 8080 -t 60000&amp;quot; comm.StringToProxy(obj, client) // order, err := client.GetOrderWithContext(ctx, &amp;quot;1&amp;quot;) // if err != nil { // panic(err) // } 如果目标地址tcp -h 127.0.0.1 -p 8080 -t 60000无法建立连接，comm.StringToProxy会出现错误或panic么？这里直接放结论：不会的，TarsGo只有在发生RPC调用时才会创建连接，并不会阻塞在这里，如果RPC调用时连接没有创建成功会在RPC调用中报错。
如果我们想控制连接创建时的超时时间该怎么做呢？
可以修改Tars服务的启动配置文件对应的配置项来完成，目前也只能通过配置文件进配置。默认链接超时时间为3000毫秒，如下所示配置值为毫秒时间戳。
&amp;lt;tars&amp;gt; &amp;lt;application&amp;gt; &amp;lt;client&amp;gt; # 默认值为3000毫秒 clientdialtimeout=3000 &amp;lt;/client&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/tars&amp;gt; 服务调用的超时 和上面连接超时的配置类似。也可以通过配置文件进行配置。如下所示：
&amp;lt;tars&amp;gt; &amp;lt;application&amp;gt; &amp;lt;client&amp;gt; # 默认值为3000毫秒 async-invoke-timeout=3000 &amp;lt;/client&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/tars&amp;gt; 同时XXXWithContext服务调用的第一个参数均是context.</description></item><item><title>写给Go开发者的Tars教程-context/status</title><link>/2024/01/09/tarsgo-context/</link><pubDate>Tue, 09 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/09/tarsgo-context/</guid><description>本篇为【写给go开发者的Tars教程】系列第五篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
本系列将持续更新，欢迎关注👏获取实时通知
导语
和在普通HTTP请求中一样，TarsGo提供了在每一次RPC中携带上下文的结构：context和status。在Go语言中，它与context.Context紧密结合，帮助我们实现服务端与客户端之间互相传递信息。其中status主要用于框架底层传递一些框架特性相关的数据。
什么是 context？ TarsGo 的 context和status的简单理解，就是 HTTP Header 中的 key-value 对
context和status 都是以 key-value 的形式存储数据的，其中 key 和 value都是 string 类型。 context和status 使得 client 和 server 能够为对方提供关于本次调用的一些信息，就像一次HTTP请求的Request Header和Response Header一样 HTTP Header 的生命周期是一次 HTTP 请求，那么 context和status 的生命周期就是一次 RPC 调用 context和status 创建 🌲 直接使用make即可： context := make(map[string]string) status := make(map[string]string) 🌲 直接使用map初始化方式： context := map[string]string{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;} status := map[string]string{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;} context和status 发送和接受 让我们再次回顾下tars文件和生成出来的client与server端的接口
module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; type OrderManagement struct { servant m.</description></item><item><title>写给go开发者的Tars教程-错误处理</title><link>/2024/01/08/tarsgo-errors/</link><pubDate>Mon, 08 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/08/tarsgo-errors/</guid><description>本篇为【写给go开发者的Tars教程】系列第四篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理
本系列将持续更新，欢迎关注👏获取实时通知
基本错误处理 首先回顾下tars文件和生成出来的client与server端的接口
module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; type OrderManagement struct { servant m.Servant } func (obj *OrderManagement) GetOrder(orderId string, opts ...map[string]string) (Order, error) { return obj.GetOrderWithContext(context.Background(), orderId, opts...) } func (obj *OrderManagement) GetOrderWithContext(tarsCtx context.Context, orderId string, opts ...map[string]string) (ret Order, err error) { // .</description></item><item><title>写给go开发者的Tars教程-拦截器</title><link>/2024/01/07/tarsgo-middleware/</link><pubDate>Sun, 07 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/07/tarsgo-middleware/</guid><description>本篇为【写给go开发者的Tars教程】系列第三篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器
TarsGo的拦截器和其他框架的拦截器（也称middleware）作用是一样的。利用拦截器我们可以在不侵入业务逻辑的前提下修改或者记录服务端或客户端的请求与响应，利用拦截器我们可以实现诸如日志记录、权限认证、限流、链路追踪等诸多功能。拦截器可以分别应用在服务端和客户端，所以TarsGo总共为我们提供了多种拦截器，下面我们进行一一介绍。
服务端拦截器（过滤器） 处理前后拦截器（过滤器） 拦截器定义如下：
// Dispatch server side Dispatch type Dispatch func(context.Context, interface{}, *requestf.RequestPacket, *requestf.ResponsePacket, bool) error // ServerFilter is used for add Filter for server dispatcher ,for implementing plugins like opentracing. type ServerFilter func(ctx context.Context, d Dispatch, f interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) 注册服务端拦截器的方法如下：
func RegisterServerFilter(f ServerFilter) // 注册服务端拦截器，只能注册一个 func RegisterPreServerFilter(f ServerFilter) // 注册服务端处理前拦截器，可多个 func RegisterPostServerFilter(f ServerFilter) // 注册服务端处理后拦截器，可多个 不推荐上面三种注册方法来注册拦截件，将在1.5版本后彻底废弃移除，推荐使用下面介绍的中间件实现对应的逻辑。
示例：
// 注册服务端过滤器 tars.RegisterServerFilter(func(ctx context.Context, d tars.</description></item></channel></rss>