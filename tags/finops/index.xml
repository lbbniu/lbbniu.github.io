<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>finops on lbbniu</title><link>/tags/finops/</link><description>Recent content in finops on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Tue, 15 Feb 2022 15:20:00 +0800</lastBuildDate><atom:link href="/tags/finops/index.xml" rel="self" type="application/rss+xml"/><item><title>【腾讯云 Finops Crane 集训营】EHPA控制器核心源码分析</title><link>/2022/02/15/crane-ehpa-code/</link><pubDate>Tue, 15 Feb 2022 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2022/02/15/crane-ehpa-code/</guid><description>官方文档：https://gocrane.io/ Github： https://github.com/gocrane/crane 启动流程 main 函数 craned 启动入口在cmd/craned/main.go文件中，main方法代码如下
func main() { logs.InitLogs() defer logs.FlushLogs() ctx := signals.SetupSignalHandler() if err := app.NewManagerCommand(ctx).Execute(); err != nil { fmt.Fprintf(os.Stderr, &amp;quot;%v\n&amp;quot;, err) os.Exit(1) } } 下面进行逐行分析：
2~3 行初始化日志，历史defer在程序退出前刷新缓存区 5行通过controller-runtime包获取信号监听可取消的context 7行创建cobra.Command命令行实例并直接调用Execute方法启动应用，如果出错退出程序 app.NewManagerCommand方法在cmd/craned/app/manager.go文件中，函数中主要是创建Options和cobra.Command，并初始化命令行参数选项。cobra.Command在执行的时候回调用cmd/craned/app/manager.go文件中的Run函数。
Run 函数 下面来重点分析下Run函数。代码如下：
// Run runs the craned with options. This should never exit. func Run(ctx context.Context, opts *options.Options) error { config := ctrl.GetConfigOrDie() config.QPS = float32(opts.ApiQps) config.Burst = opts.ApiBurst ctrlOptions := ctrl.Options{ Scheme: scheme, MetricsBindAddress: opts.MetricsAddr, Port: 9443, HealthProbeBindAddress: opts.</description></item></channel></rss>