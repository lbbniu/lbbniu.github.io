<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on lbbniu</title><link>/tags/golang/</link><description>Recent content in golang on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Sun, 10 Dec 2023 15:20:00 +0800</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>用Golang助力表妹轻松实现自动化办公！（完整代码附后）</title><link>/2023/12/10/goalng-execl/</link><pubDate>Sun, 10 Dec 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/12/10/goalng-execl/</guid><description>Hello，大家好，我是lbbniu~
今天有一个有趣的编程需求要分享，这次的灵感来源于我可爱的表妹。简单来说，我们将利用Golang对Excel文件进行批量处理，达到高效自动化办公的目的。
一、具体需求 手上有一系列N个表格，每个表格都有相同的结构，看起来就像这样：
任务是将所有表中的数据汇总，按照每个人的得分和积分进行合计，然后按总积分排名。在总积分相同的情况下，名次也相同但不是连续的排序。如果总积分和名次都相同，再按总得分降序展示，但不改变排名。
结果如下图所示：
二、Golang开发 首先，让我们引入需要的包：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;path/filepath&amp;quot; &amp;quot;sort&amp;quot; &amp;quot;github.com/tealeg/xlsx&amp;quot; ) 接下来，获取所有Excel文件的路径：
func getExcelFiles() []string { files, err := filepath.Glob(&amp;quot;./样例数据/*.xlsx&amp;quot;) if err != nil { log.Fatal(err) } return files } 然后，将各表数据合并到主结构体：
// Record 结构体表示每个人的记录 type Record struct { Name string Monthly int Points int Ranking int } func getCellValue(cell *xlsx.Cell) int { value, err := cell.Int() if err != nil { log.Fatal(err) } return value } func mergeData(files []string) []Record { var mergedData []Record for _, file := range files { // 读取Excel文件 xlFile, err := xlsx.</description></item><item><title>Golang语法的25个练习题：21至25题</title><link>/2023/02/24/uri-addr/</link><pubDate>Fri, 24 Feb 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/02/24/uri-addr/</guid><description>题目21：三个数取最大数 己知数字a，b，c分别为10，6，18
找出a，b，c中最大的数字(不借助函数以及列表等方式)
我们知道函数max可以直接获取到最大值，或者可以把数字添加到列表里，通过排序也能获取到最大数字，我们单纯使用if分支来实现
package main import &amp;quot;fmt&amp;quot; func main() { a, b, c := 10, 6, 8 max := a if max &amp;lt; b { max = b } if max &amp;lt; c { max = c } fmt.Println(max) } 题目22：因子之和“完数” 什么是因子？
因子就是所有可以整除这个数的数字，包括1但不包括这个数自身。比如8的因子有1，2，4
什么是完数？
一个数如果恰好等于它的因子之和，这个数就称为“完数”，打印输出1000以内的完数，例如6=1+2+3，6就是“完数
package main import &amp;quot;fmt&amp;quot; func main() { for i := 1; i &amp;lt; 1000; i++ { if i == factorSum(i) { fmt.Println(&amp;quot;//&amp;quot;, i) } } // output: // 6 // 28 // 496 } func factorSum(n int) int { sum := 0 for i := 1; i &amp;lt; n; i++ { if n%i == 0 { sum += i } } return sum } 题目23：递归阶乘求和 一个正整数的阶乘(factorial)是所有小于及等于该数的正整数之积，并且0的阶乘为1</description></item><item><title>Golang语法的25个练习题：16至20题</title><link>/2023/02/23/uri-addr/</link><pubDate>Thu, 23 Feb 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/02/23/uri-addr/</guid><description>题目16：大衍数列 中国古代文献中，曾记载过“大衍数列”，主要用于解释中国传统文化中的太极衍生原理
它的前几项是：0、2、4、8、12、18、24、32、40、50&amp;hellip;
其规律是：偶数项，是序号平方再除2，奇数项，是序号平方减1再除2。
打印大衍数列的前100项
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func main() { for i := 1; i &amp;lt;= 100; i++ { var a int if i%2 == 0 { // 偶数 a = int(math.Pow(float64(i), 2)) / 2 } else { // 奇数 a = (int(math.Pow(float64(i), 2)) - 1) / 2 } fmt.Println(&amp;quot;//&amp;quot;, a) } // 0 // 2 // 4 // 8 // 12 // 18 // 24 // 32 // 40 // 50 } 题目17：单词分析 小蓝正在学习一门神奇的语言，这门语言中的单词都是由小写英文字母组成，有些单词很长，远远超过正常英文单词的长度。小蓝学了很长时间也记不住一些单词，他准备不再完全记忆这些单词，而是根据单词中哪个字母出现得最多来分辨单词 现在，请你帮助小蓝，给了一个单词后，帮助他找到出现最多的字母和这个字母出现的次数 其实就是让你输入一段字符串后，得到当前字符串出现最多的字母和它的次数 输入：HelloWorld 输出： l 3 我们可以对当前的字符串进行循环迭代，然后把字符串当前每个字符当作key值，把它存到字典里面，如果当前key在字典里面，我们就让它加一，如果不在那我们就让它的次数初始化为1，最终我们再从字典找到次数最多的key值和value值 package main import &amp;quot;fmt&amp;quot; func main() { analyseWords(&amp;quot;helloworld&amp;quot;) // l 3 } func analyseWords(word string) { wordDict := map[rune]int{} var ( count int ch rune ) for _, c := range word { wordDict[c]++ if wordDict[c] &amp;gt; count { count, ch = wordDict[c], c } } fmt.</description></item><item><title>Golang语法的25个练习题：11至15题</title><link>/2023/02/22/uri-addr/</link><pubDate>Wed, 22 Feb 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/02/22/uri-addr/</guid><description>题目11：剪刀石头布 游戏开始，初始状态下用户和电脑都有100分，赢一局+10分，输一局-10分。当用户为0分时，游戏结束，提示游戏结束，比赛输了，当用户为200分时，游戏结束，提示游戏结束，赢得比赛、每轮比赛都输出当前的分数
1代表剪刀 2代表石头 3代表布
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;time&amp;quot; ) var ( gameInfo = map[int]string{ 1: &amp;quot;剪刀&amp;quot;, 2: &amp;quot;石头&amp;quot;, 3: &amp;quot;布&amp;quot;, } score = 100 ) func main() { fmt.Println(strings.Repeat(&amp;quot;=&amp;quot;, 60)) fmt.Println(strings.Repeat(&amp;quot; &amp;quot;, 20), &amp;quot;剪刀石头布游戏&amp;quot;) fmt.Println(&amp;quot;1代表剪刀 2代表石头 3代表布&amp;quot;) for { rd := rand.New(rand.NewSource(time.Now().UnixNano())) robotsChoice := rd.Intn(3) if robotsChoice == 0 { robotsChoice++ } userChoice, err := input(&amp;quot;请出拳&amp;quot;) if err != nil { fmt.Println(err) continue } if _, ok := gameInfo[userChoice]; !</description></item><item><title>Golang语法的25个练习题：6至10题</title><link>/2023/02/15/uri-addr/</link><pubDate>Wed, 15 Feb 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/02/15/uri-addr/</guid><description>题目6：闰年问题升级版 输入年月日，输出该日期是否是闰年，并且输出该日期是此年份的第几天
闰年判断条件：
能被4整除，并且不能被100整除 能被400整除 两个条件满足任意一个就为闰年 算法思路
接收用户输入的年月日，创建保存12个月份天数的列表 根据年份判断是否是闰年，如果是把二月份设为29天，否则把二月份设为28天 根据月份和日期统计是当年的第几天 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; ) func main() { year, err := input(&amp;quot;请输入年份&amp;quot;) if err != nil { log.Fatalln(err) } month, err := input(&amp;quot;请输入月份&amp;quot;) if err != nil { log.Fatalln(err) } day, err := input(&amp;quot;请输入日期&amp;quot;) if err != nil { log.Fatalln(err) } dateList := []int{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31} countDay := day if year%4 == 0 &amp;amp;&amp;amp; year%100 !</description></item><item><title>Golang语法的25个练习题：1至5题</title><link>/2023/02/13/uri-addr/</link><pubDate>Mon, 13 Feb 2023 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2023/02/13/uri-addr/</guid><description>题目1：水仙花数 水仙花数（Narcissistic number）也被称为超完全数字不变数（pluperfect digital invariant, PPDI）、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number），水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身。例如：1^3 + 5^3+ 3^3 = 153。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func main() { // 写法一 for i := 100; i &amp;lt; 1000; i++ { // 取百位数字 123//100=1 // 取十位数字 123//10=12 12%10=2 // 取个位数字 123%10=3 i1, i2, i3 := i/100, i/10%10, i%10 if int(math.Pow(float64(i1), 3)+math.Pow(float64(i2), 3)+math.Pow(float64(i3), 3)) == i { fmt.Printf(&amp;quot;%d是水仙花数\n&amp;quot;, i) // 153 是水仙花数 // 370 是水仙花数 // 371 是水仙花数 // 407 是水仙花数 } } // 写法二 for i := 1000; i &amp;lt; 10000; i++ { sum := 0 for k := i; k &amp;gt; 0; k = k / 10 { // 个十百 sum += int(math.</description></item></channel></rss>