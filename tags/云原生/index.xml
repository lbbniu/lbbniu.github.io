<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云原生 on lbbniu</title><link>/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/</link><description>Recent content in 云原生 on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Sun, 12 Dec 2021 18:53:48 +0800</lastBuildDate><atom:link href="/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>云原生训练营作业</title><link>/cloud-native/work/</link><pubDate>Sun, 12 Dec 2021 18:53:48 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/work/</guid><description>资料 https://cncamp.notion.site/cncamp/kubernetes-8a9d48ee26284b3c8ddf9de4c62ea895 模块一：Go 语言特性 无作业
模块二：Go语言进阶 必做 编写一个 HTTP 服务器，大家视个人不同情况决定完成到哪个环节，但尽量把 1 都做完。
接收客户端 request，并将 request 中带的 header 写入 response header 读取当前系统的环境变量中的 VERSION 配置，并写入 response header Server 端记录访问日志包括客户端 IP，HTTP 返回码，输出到 server 端的标准输出 当访问 localhost/healthz 时，应返回 200 作业提交链接： https://jinshuju.net/f/PlZ3xg 提交截止时间：10 月 7 日晚 23:59 前
模块三：Docker核心技术 必做 构建本地镜像。 编写 Dockerfile 将练习 2.2 编写的 httpserver 容器化（请思考有哪些最佳实践可以引入到 Dockerfile 中来）。 将镜像推送至 Docker 官方镜像仓库。 通过 Docker 命令本地启动 httpserver。 通过 nsenter 进入容器查看 IP 配置。 作业需编写并提交 Dockerfile 及源代码。
作业提交链接： https://jinshuju.net/f/rxeJhn 提交截止时间：10 月 17 日 23:59</description></item><item><title>云原生常用学习网址</title><link>/cloud-native/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%B8%B8%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/</link><pubDate>Tue, 23 Nov 2021 09:53:48 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%B8%B8%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/</guid><description>软件版本（孟老师的建议）
Go：1.17 Docker：20.10.8 K8s：1.22.0 Istio：1.9 服务器或本机环境配置要求：
本机如果能创建4核CPU 12G内存，30G磁盘的虚拟机就可以 如果用云主机建议类似配置，如果选择更小的服务器比如4C 8G，建议至少两台 如果更小的2C 4G服务器，至少三台 更小的服务器不适合 训练营所有示例代码，都放在孟凡杰老师的 Github：https://github.com/cncamp/golang Go 语言官网：https://golang.google.cn/dl/
下载并安装 Go 的编程工具：https://code.visualstudio.com/download
安装 Go 语言插件：https://marketplace.visualstudio.com/items?itemName=golang.go
下载并安装 Git Command Line：https://git-scm.com/downloads
从老师的 Github 上下载代码的命令行：git clone https://github.com/cncamp/golang.git Golang Playground（可以直接在网页里编写和运行 Go 语言程序）：https://play.golang.org/
国内可以访问的 Playground：https://goplay.tools/
Go 语言教程（Go Bible）：https://docs.hacknode.org/gopl-zh/ch1/ch1-01.html
Golang 调度原理：https://learnku.com/articles/41728
Go Channel 原理：https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html
Go Channel 原理（中文博客）：https://juejin.cn/post/6844904016254599176
Go 语言高性能 httpserver 代码实现细节：https://pouncing-waterfall-7c4.notion.site/http-server-socket-detail-e1f350d63c7c4d9f86ce140949bd90c2
模块二 K8s 日常运维代码调试场景案例（空指针）：https://github.com/kubernetes/kubernetes/pull/102229
模块二 K8s 日常运维代码调试场景案例（kube-proxy）：https://github.com/kubernetes/kubernetes/pull/79444
Makefiles 教程：https://makefiletutorial.com/
cgroupfs cgroup 和 systemd 有什么区别：https://www.codenong.com/cs109603870/</description></item><item><title>云原生临时记录</title><link>/cloud-native/temp/</link><pubDate>Sat, 20 Nov 2021 15:22:23 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/temp/</guid><description>Crane Crane-Colocation crane-full-capabilities 云原生 https://kubernetes.io/zh/docs/tasks/extend-kubectl/kubectl-plugins/ https://github.com/kubernetes/sample-cli-plugin https://mp.weixin.qq.com/s/r7RzGUuem1GPuKnLc8XEuw kubectl plugin https://krew.sigs.k8s.io/plugins/ 首先得出一个设计的proposal看下，包括原理，设计，代码结构，功能等 用插件扩展 kubectl 使用 Go 从零开发并发布一个 Kubectl 插件 https://github.com/kubernetes/sample-cli-plugin question 删除namespace为什么会Terminating？ kubectl get ns kubesphere-controls-system -o json | jq '.spec.finalizers=[]' &amp;gt; ns-without-finalizers.json cat ns-without-finalizers.json kubectl get ns kubesphere-monitoring-system -o json | jq '.metadata.finalizers=[]' &amp;gt; ns-without-finalizers.json cat ns-without-finalizers.json kubectl proxy &amp;amp; PID=$! curl -X PUT http://localhost:8001/api/v1/namespaces/kubesphere-monitoring-system/finalize -H &amp;quot;Content-Type: application/json&amp;quot; --data-binary @ns-without-finalizers.json kill $ID helm repo add gocrane https://finops-helm.pkg.coding.net/gocrane/gocrane helm repo add prometheus-community https://finops-helm.pkg.coding.net/gocrane/prometheus-community helm repo add grafana https://finops-helm.</description></item></channel></rss>