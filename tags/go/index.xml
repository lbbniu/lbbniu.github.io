<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on lbbniu</title><link>/tags/go/</link><description>Recent content in go on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Sat, 13 Jan 2024 15:20:00 +0800</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>写给Go开发者的Tars教程-TarsGateway</title><link>/2024/01/13/tarsgo-tarsgateway/</link><pubDate>Sat, 13 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/13/tarsgo-tarsgateway/</guid><description>本篇为【写给go开发者的Tars教程】系列第八篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
第六篇：超时控制
第七篇：安全
第八篇：用户认证
第九篇：服务发现与负载均衡
第十篇：TarsGateway
本系列将持续更新，欢迎关注👏获取实时通知
关注公众号获得更多精彩文章</description></item><item><title>写给Go开发者的Tars教程-服务发现与负载均衡</title><link>/2024/01/13/tarsgo-auth/</link><pubDate>Sat, 13 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/13/tarsgo-auth/</guid><description>本篇为【写给go开发者的Tars教程】系列第九篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
第六篇：超时控制
第七篇：安全
第八篇：用户认证
第九篇：服务发现与负载均衡
本系列将持续更新，欢迎关注👏获取实时通知
关注公众号获得更多精彩文章</description></item><item><title>写给Go开发者的Tars教程-用户认证</title><link>/2024/01/12/tarsgo-auth/</link><pubDate>Fri, 12 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/12/tarsgo-auth/</guid><description>本篇为【写给go开发者的Tars教程】系列第八篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
第六篇：超时控制
第七篇：安全
第八篇：用户认证
本系列将持续更新，欢迎关注👏获取实时通知
关注公众号获得更多精彩文章</description></item><item><title>写给Go开发者的Tars教程-用户认证</title><link>/2024/01/11/tarsgo-auth/</link><pubDate>Thu, 11 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/11/tarsgo-auth/</guid><description>本篇为【写给go开发者的Tars教程】系列第七篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
第六篇：超时控制
第七篇：安全
本系列将持续更新，欢迎关注👏获取实时通知
关注公众号获得更多精彩文章</description></item><item><title>写给Go开发者的Tars教程-超时控制</title><link>/2024/01/10/tarsgo-context/</link><pubDate>Wed, 10 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/10/tarsgo-context/</guid><description>本篇为【写给go开发者的Tars教程】系列第六篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
第六篇：超时控制
本系列将持续更新，欢迎关注👏获取实时通知
关注公众号获得更多精彩文章</description></item><item><title>写给Go开发者的Tars教程-context/status</title><link>/2024/01/09/tarsgo-context/</link><pubDate>Tue, 09 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/09/tarsgo-context/</guid><description>本篇为【写给go开发者的Tars教程】系列第五篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理 第五篇：context/status
本系列将持续更新，欢迎关注👏获取实时通知
导语
和在普通HTTP请求中一样，TarsGo提供了在每一次RPC中携带上下文的结构：context和status。在Go语言中，它与context.Context紧密结合，帮助我们实现服务端与客户端之间互相传递信息。其中status主要用于框架底层传递一些框架特性相关的数据。
什么是 context？ TarsGo 的 context和status的简单理解，就是 HTTP Header 中的 key-value 对
context和status 都是以 key-value 的形式存储数据的，其中 key 和 value都是 string 类型。 context和status 使得 client 和 server 能够为对方提供关于本次调用的一些信息，就像一次HTTP请求的Request Header和Response Header一样 HTTP Header 的生命周期是一次 HTTP 请求，那么 context和status 的生命周期就是一次 RPC 调用 context和status 创建 🌲 直接使用make即可： context := make(map[string]string) status := make(map[string]string) 🌲 直接使用map初始化方式： context := map[string]string{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;} status := map[string]string{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;} context和status 发送和接受 让我们再次回顾下tars文件和生成出来的client与server端的接口
module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; type OrderManagement struct { servant m.</description></item><item><title>写给go开发者的Tars教程-错误处理</title><link>/2024/01/08/tarsgo-errors/</link><pubDate>Mon, 08 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/08/tarsgo-errors/</guid><description>本篇为【写给go开发者的Tars教程】系列第四篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器 第四篇：错误处理
本系列将持续更新，欢迎关注👏获取实时通知
基本错误处理 首先回顾下tars文件和生成出来的client与server端的接口
module order { struct Order { 1 require string id; 2 optional vector&amp;lt;string&amp;gt; items; 3 optional string description; 4 require float price; 5 optional string destination; }; interface OrderManagement { Order getOrder(string orderId); }; }; type OrderManagement struct { servant m.Servant } func (obj *OrderManagement) GetOrder(orderId string, opts ...map[string]string) (Order, error) { return obj.GetOrderWithContext(context.Background(), orderId, opts...) } func (obj *OrderManagement) GetOrderWithContext(tarsCtx context.Context, orderId string, opts ...map[string]string) (ret Order, err error) { // .</description></item><item><title>写给go开发者的Tars教程-拦截器</title><link>/2024/01/07/tarsgo-middleware/</link><pubDate>Sun, 07 Jan 2024 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/07/tarsgo-middleware/</guid><description>本篇为【写给go开发者的Tars教程】系列第三篇
第一篇：Tars协议基础 第二篇：通信模式 第三篇：拦截器
TarsGo的拦截器和其他框架的拦截器（也称middleware）作用是一样的。利用拦截器我们可以在不侵入业务逻辑的前提下修改或者记录服务端或客户端的请求与响应，利用拦截器我们可以实现诸如日志记录、权限认证、限流、链路追踪等诸多功能。拦截器可以分别应用在服务端和客户端，所以TarsGo总共为我们提供了多种拦截器，下面我们进行一一介绍。
服务端拦截器（过滤器） 处理前后拦截器（过滤器） 拦截器定义如下：
// Dispatch server side Dispatch type Dispatch func(context.Context, interface{}, *requestf.RequestPacket, *requestf.ResponsePacket, bool) error // ServerFilter is used for add Filter for server dispatcher ,for implementing plugins like opentracing. type ServerFilter func(ctx context.Context, d Dispatch, f interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) 注册服务端拦截器的方法如下：
func RegisterServerFilter(f ServerFilter) // 注册服务端拦截器，只能注册一个 func RegisterPreServerFilter(f ServerFilter) // 注册服务端处理前拦截器，可多个 func RegisterPostServerFilter(f ServerFilter) // 注册服务端处理后拦截器，可多个 不推荐上面三种注册方法来注册拦截件，将在1.5版本后彻底废弃移除，推荐使用下面介绍的中间件实现对应的逻辑。
示例：
// 注册服务端过滤器 tars.RegisterServerFilter(func(ctx context.Context, d tars.</description></item><item><title>一篇文章精通php多版本管理工具：phpbrew</title><link>/2024/01/04/phpbrew/</link><pubDate>Thu, 04 Jan 2024 22:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2024/01/04/phpbrew/</guid><description>大家好，我是lbbniu。
今天给大家介绍以下 Uber 开源的静态分析工具 NilAway，下面开鲁。
最近 Uber 开发和开源了一个挺不错的静态分析工具 NilAway：
NilAway是一个静态分析工具，旨在通过在编译时而不是运行时捕获nil panic来帮助开发人员避免在生产中出现这种情况。NilAway类似于标准的nilness分析器，但它采用更复杂和强大的静态分析技术来跟踪包内和跨包的nil流，并报告错误，为用户提供更轻松的调试nilness流程。
NilAway具有三个关键特性，使其脱颖而出：
完全自动化：NilAway配备有推理引擎，因此除了标准的Go代码之外，它不需要从开发人员那里获取任何其他信息（例如注释）。 速度快：我们设计NilAway为快速且可扩展，适用于大型代码库。在我们的测量中，启用NilAway时构建时间开销不到5%。我们还在不断应用优化来进一步减少其占用空间。 实用性：它不能阻止代码中所有可能的nil panic，但它可以捕获我们在生产中观察到的大多数潜在nil panic，使NilAway在实用性和构建时间开销之间保持良好平衡。 安装 NilAway是使用标准的go/analysis框架实现的，因此易于与现有的分析驱动程序集成（例如golangci-lint、nogo或作为独立检查器运行）。下面是将NilAway作为独立检查器运行的说明。更多集成支持将很快添加。
独立检查器 通过以下命令从源代码安装二进制文件：
go install go.uber.org/nilaway/cmd/nilaway@latest 然后，通过以下命令运行linter：
nilaway ./... 代码示例 案例一 让我们看一些示例，了解NilAway如何帮助防止nil panic。
// Example 1: var p *P if someCondition { p = &amp;amp;P{} } print(p.f) // nilness reports NO error here, but NilAway does. 在这个示例中，局部变量p仅在someCondition为true时初始化。在字段访问p.f时，如果someCondition为false，则可能发生panic。NilAway能够捕获这个潜在的nil导致的panic并报告以下错误：
go.uber.org/example.go:12:9: error: Potential nil panic detected. Observed nil flow from source to dereference point: -&amp;gt; go.uber.org/example.go:12:9: unassigned variable `p` accessed field `f` 如果我们使用nil检查（if p !</description></item><item><title>第一课Go程序怎么跑起来的</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/01%E7%AC%AC%E4%B8%80%E8%AF%BEgo%E7%A8%8B%E5%BA%8F%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</link><pubDate>Tue, 23 Nov 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/01%E7%AC%AC%E4%B8%80%E8%AF%BEgo%E7%A8%8B%E5%BA%8F%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</guid><description>怎么学习？ https://xargin.com/how-to-learn 找程序入口 gdb info files readelf -h cutter[可视化工具] dlv 理解可执⾏⽂件 本节课涉及的⼯具都准备在Dockerfile⾥了，⼤家可以⾃⾏实验
2200000000 FROM centos RUN yum install golang -y \ &amp;amp;&amp;amp; yum install dlv -y \ &amp;amp;&amp;amp; yum install binutils -y \ &amp;amp;&amp;amp; yum install vim -y \ &amp;amp;&amp;amp; yum install gdb -y 编译方法 # 编译方法 docker build -t test . docker run -it --rm test bash Linux的可执⾏⽂件ELF(Executable and Linkable Format)为例，ELF由⼏部分构成：
ELF header Section header Sections 参考连接 https://github.com/corkaami/pics Go进程的启动与初始化 游戏：人力资源机器
环境变量：GOMAXPROCS
调度组件与调度循环 goroutine的⽣产端 https://www.figma.com/proto/gByIPDf4nRr6No4dNYjn3e/bootstrap?page-id=242%3A7&amp;amp;nodeid=242%3A215&amp;amp;viewport=516%2C209%2C0.07501539587974548&amp;amp;scaling=scale-down-width goroutine的消费端 https://www.</description></item><item><title>管理多版本 Go 安装</title><link>/2021/11/23/%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%AC-go-%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 23 Nov 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2021/11/23/%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%AC-go-%E5%AE%89%E8%A3%85/</guid><description>管理 Go 安装 目录 安装多个 Go 版本 卸载 Go Linux / macOS / FreeBSD 视窗 本主题介绍如何在同一台机器上安装多个版本的 Go，以及如何卸载 Go。
有关安装的其他内容，您可能对以下内容感兴趣：
下载和安装 ——最简单的安装和运行方式。 从源代码安装 Go—— 如何检查源代码、在您自己的机器上构建它们并运行它们。 安装多个 Go 版本 您可以在同一台机器上安装多个 Go 版本。例如，您可能希望在多个 Go 版本上测试您的代码。有关可以通过这种方式安装的版本列表，请参阅下载页面 。
**注意：**要使用此处描述的方法进行安装，您需要安装git 。
要安装其他 Go 版本，请运行go install命令 ，指定要安装的版本的下载位置。以下示例说明了版本 1.10.7：
# go version &amp;lt; 1.17 $ go get -u golang.org/dl/go1.10.7 # go version &amp;gt;= 1.17 $ go install golang.org/dl/go1.10.7@latest $ go1.10.7 download	要使用新下载的版本运行go命令，请将版本号附加到go命令中，如下所示：
$ go1.10.7 version go version go1.10.7 linux/amd64 当您安装了多个版本时，您可以发现每个版本的安装位置，查看版本的GOROOT值。例如，运行如下命令：
$ go1.10.7 env GOROOT 要卸载下载的版本，只需删除其GOROOT环境变量和 goX.</description></item><item><title>第二课 Go语法背后的秘密</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/02%E7%AC%AC%E4%BA%8C%E8%AF%BEgo%E8%AF%AD%E6%B3%95%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86/</link><pubDate>Wed, 15 Dec 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/02%E7%AC%AC%E4%BA%8C%E8%AF%BEgo%E8%AF%AD%E6%B3%95%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86/</guid><description> go build -x hello.go 语法分析 https://astexplorer.net GOSSAFUNC=funcname go builld x.go
编译过程 https://godbolt.org go tool compile -S ./hello.go | grep &amp;ldquo;hello.go:5&amp;rdquo;
go tool objdump ./x
goyacc
课上推荐资源 https://xargin.com/addr-of-empty-struct-may-not-eq/ https://xargin.com/go1-17-new-calling-convention/ https://elasticsearch.cn/article/114 Github https://github.com/cch123/elasticsql https://github.com/cch123/parser_example https://github.com/go-internals-cn/go-internals https://github.com/grantseltzer/weaver https://github.com/YYCoder/protobuf-thrift https://github.com/vitessio/vitess https://github.com/xwb1989/sqlparser Dash 文档工具
电子书渠道 libgen、z-lib
关注公众号获得更多精彩文章</description></item><item><title>第三课 神奇的内置数据结构</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/03%E7%AC%AC%E4%B8%89%E8%AF%BE%E7%A5%9E%E5%A5%87%E7%9A%84%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Wed, 15 Dec 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/03%E7%AC%AC%E4%B8%89%E8%AF%BE%E7%A5%9E%E5%A5%87%E7%9A%84%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>参考资料 Github https://github.com/go-internals-cn/go-internals https://github.com/grantseltzer/weaver gopsutil、top、runtime.MemStats
关注公众号获得更多精彩文章</description></item><item><title>第四课 编程语言与操作系统的桥梁</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/04%E7%AC%AC%E5%9B%9B%E8%AF%BE%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A1%A5%E6%A2%81/</link><pubDate>Wed, 22 Dec 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/04%E7%AC%AC%E5%9B%9B%E8%AF%BE%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A1%A5%E6%A2%81/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第五课 Go 语言的内存管理和拉垃圾回收</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/05%E7%AC%AC%E4%BA%94%E8%AF%BEgo-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E6%8B%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Wed, 22 Dec 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/05%E7%AC%AC%E4%BA%94%E8%AF%BEgo-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E6%8B%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>内存逃逸分析： cmd/compile/internal/escape.go
test：/master/test
go build -gcflags=&amp;quot;-m&amp;quot; escapge.go 书 垃圾回收的算法与实现 垃圾回收算法手册（章节1、2、7、11.8、12.1、15、19.6） 关注公众号获得更多精彩文章</description></item><item><title>第三课 神奇的内置数据结构</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/04%E7%AC%AC%E4%B8%89%E5%9B%9B%E8%AF%BE%E7%AD%94%E7%96%91/</link><pubDate>Wed, 15 Dec 2021 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/04%E7%AC%AC%E4%B8%89%E5%9B%9B%E8%AF%BE%E7%AD%94%E7%96%91/</guid><description>课上推荐资源：
Benchstat go
https://github.com/gopl-zh/gopl-zh.github.com https://github.com/cznic/goyacc https://github.com/chai2010/go-ast-book java https://github.com/alibaba/arthas 关注公众号获得更多精彩文章</description></item><item><title>第六课 并发编程最佳实践实</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/06%E7%AC%AC%E5%85%AD%E8%AF%BE%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%AE%9E/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/06%E7%AC%AC%E5%85%AD%E8%AF%BE%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%AE%9E/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第七课 社区优秀开源框架对比</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/07%E7%AC%AC%E4%B8%83%E8%AF%BE%E7%A4%BE%E5%8C%BA%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/07%E7%AC%AC%E4%B8%83%E8%AF%BE%E7%A4%BE%E5%8C%BA%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</guid><description> https://jaycechant.info/2020/go-bindata-golang-static-resources-embedding/ 关注公众号获得更多精彩文章</description></item><item><title>第八课 深入Web框架原理与实现</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/08%E7%AC%AC%E5%85%AB%E8%AF%BE%E6%B7%B1%E5%85%A5web%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/08%E7%AC%AC%E5%85%AB%E8%AF%BE%E6%B7%B1%E5%85%A5web%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第九课 框架之上的业务分层</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/09%E7%AC%AC%E4%B9%9D%E8%AF%BE%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%8A%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%88%86%E5%B1%82/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/09%E7%AC%AC%E4%B9%9D%E8%AF%BE%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%8A%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%88%86%E5%B1%82/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第十课如何写出优雅的Go代码</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/10%E7%AC%AC%E5%8D%81%E8%AF%BE%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84go%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/10%E7%AC%AC%E5%8D%81%E8%AF%BE%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84go%E4%BB%A3%E7%A0%81/</guid><description> effective-go
50 shades
100 Go Mistakes (How to Avoid Them)
awesome-go
golint golangci-lint go fmt go vet gocyclo 圈复杂度检查 ineffassign misspell reviewdog
《重构》第二版第三章 bad smell
《代码大全》表驱动章节
参考学习资料 goreportcard.com https://golang.com/cmd/vet https://github.com/kisielk/errcheck https://github.com/timakin/bodyclose https://github.com/gostaticanalysis/sqlrows https://github.com/analysis-tools-dev/static-analysis https://xargin.com/about-livinig-doc/ https://www.jetbrains.com/help/go/using-the-testify-toolkit.html#compare-expected-and-actual-values https://github.com/golang/go/wiki/TableDrivenTests https://segment.com/blog/5-advanced-testing-techniques-in-go/ https://stackoverflow.com/questions/42102496/testing-a-grpc-service https://github.com/smartystreets/goconvey https://github.com/onsi/ginkgo https://blog.csdn.net/zwqjoy/article/details/79474196 https://juejin.cn/post/6844903837875208205 Go programming language第11章
https://github.com/gopl-zh/gopl-zh.github.com PingCAP的failpoint
https://github.com/pingcap/failpoint failpoint的设计与实现
https://juejin.cn/post/6844903837875208205 GoConvey测试
https://blog.csdn.net/zwqjoy/article/details/79474196 ginkgo测试
https://semaphoreci.com/community/tutorials/getting-started-with-bdd-in-go-using-ginkgo Didi的Go流量录制、流量回放⽅案
https://github.com/didi/sharingan 关注公众号获得更多精彩文章</description></item><item><title>第十一课 设计互联网高并发数据中台</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/11%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE%E8%AE%BE%E8%AE%A1%E4%BA%92%E8%81%94%E7%BD%91%E9%AB%98%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/11%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE%E8%AE%BE%E8%AE%A1%E4%BA%92%E8%81%94%E7%BD%91%E9%AB%98%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第十二课 成为Go语言性能调优专家</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/12%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE%E6%88%90%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%B8%93%E5%AE%B6/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/12%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE%E6%88%90%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%B8%93%E5%AE%B6/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第十三课 分布式服务的拆分难题</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/13%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%8B%86%E5%88%86%E9%9A%BE%E9%A2%98/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/13%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%8B%86%E5%88%86%E9%9A%BE%E9%A2%98/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第十四课 一线互联网公司的CI/CD实践</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/14%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE%E4%B8%80%E7%BA%BF%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E7%9A%84cicd%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/14%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE%E4%B8%80%E7%BA%BF%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E7%9A%84cicd%E5%AE%9E%E8%B7%B5/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第十五课 微服务的监控和可观测序</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/15%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%9B%91%E6%8E%A7%E5%92%8C%E5%8F%AF%E8%A7%82%E6%B5%8B%E5%BA%8F/</link><pubDate>Mon, 10 Jan 2022 13:40:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/15%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%9B%91%E6%8E%A7%E5%92%8C%E5%8F%AF%E8%A7%82%E6%B5%8B%E5%BA%8F/</guid><description>Metrics Prometheus 默认端口9090 Counter【计数类】、Gauge【状态数据】、Summary【分位数据】、Histogram【直方图】 Pushgateway 默认端口9091 Alertmanager 告警模块 Google 的Monarch Traces Logs 关注公众号获得更多精彩文章</description></item><item><title>第十六课微服务基础设施-服务发现、检索、定时任务、MQ</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/16%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AF%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%A3%80%E7%B4%A2%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1mq/</link><pubDate>Mon, 10 Jan 2022 13:40:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/16%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AF%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%A3%80%E7%B4%A2%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1mq/</guid><description>MQ Kafka
Pulsar
关注公众号获得更多精彩文章</description></item><item><title>第十七课 大型互联网公司的稳定性密码</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/17%E7%AC%AC%E5%8D%81%E4%B8%83%E8%AF%BE%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%AF%86%E7%A0%81/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/17%E7%AC%AC%E5%8D%81%E4%B8%83%E8%AF%BE%E5%A4%A7%E5%9E%8B%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%AF%86%E7%A0%81/</guid><description>混沌工程 ChaosBlade
Chaos Mesh
关注公众号获得更多精彩文章</description></item><item><title>第十八课 Cloud Native Go</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/18%E7%AC%AC%E5%8D%81%E5%85%AB%E8%AF%BEcloud-native-go/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/18%E7%AC%AC%E5%8D%81%E5%85%AB%E8%AF%BEcloud-native-go/</guid><description>参考 https://github.com/lorin/resilience-engineering https://sre.google 安全容器：gVisor、katacontainer
sealos、minikube
etcd运维平台：kstone
《深入剖析kubernetes》
《DevSecOps 实战》
Caddy
https://dengxiaolong.com/caddy/zh/ https://caddyserver.com/docs/ 云原生 ingress：envoy Contour maglev 论文
https://blog.csdn.net/chenyulancn/article/details/79019457 SDN 关注公众号获得更多精彩文章</description></item><item><title>第十九课 Go语言前沿实时剖析</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/19%E7%AC%AC%E5%8D%81%E4%B9%9D%E8%AF%BEgo%E8%AF%AD%E8%A8%80%E5%89%8D%E6%B2%BF%E5%AE%9E%E6%97%B6%E5%89%96%E6%9E%90/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/19%E7%AC%AC%E5%8D%81%E4%B9%9D%E8%AF%BEgo%E8%AF%AD%E8%A8%80%E5%89%8D%E6%B2%BF%E5%AE%9E%E6%97%B6%E5%89%96%E6%9E%90/</guid><description>关注公众号获得更多精彩文章</description></item><item><title>第二十课 Go 语言与未来架构</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/20%E7%AC%AC%E4%BA%8C%E5%8D%81%E8%AF%BEgo%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%9C%AA%E6%9D%A5%E6%9E%B6%E6%9E%84/</link><pubDate>Fri, 14 Jan 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/20%E7%AC%AC%E4%BA%8C%E5%8D%81%E8%AF%BEgo%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%9C%AA%E6%9D%A5%E6%9E%B6%E6%9E%84/</guid><description>Service Mesh cds (Cluster discovery service) eds (Endpotin discovery service) lds (Listener discovery service) rds (Route discovery service) 组件 xDS protoc
Envoy
MOSN
Istio
Dapr（Distributed Application Runtime）
Mecha架构 http2&amp;amp;3学习手册: https://github.com/bagder/http2-explained https://http2-explained.haxx.se/zh https://github.com/bagder/http3-explained https://http3-explained.haxx.se/zh https://cloud.google.com/traffic-director/docs/proxyless-overview https://isovalent.com/blog/post/2021-12-08-ebpf-servicemesh 练习 Dapr 搭建hello world
dapr 文档: https://docs.dapr.io/zh-hans/ 关注公众号获得更多精彩文章</description></item><item><title>第十八课 以go-micro为例讲讲抽象【二期内容】</title><link>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/21%E7%AC%AC%E5%8D%81%E5%85%AB%E8%AF%BE-%E4%BB%A5go-micro%E4%B8%BA%E4%BE%8B%E8%AE%B2%E8%AE%B2%E6%8A%BD%E8%B1%A1%E4%BA%8C%E6%9C%9F/</link><pubDate>Sat, 12 Mar 2022 13:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/docs/go%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AE%9E%E6%88%98%E8%90%A5/21%E7%AC%AC%E5%8D%81%E5%85%AB%E8%AF%BE-%E4%BB%A5go-micro%E4%B8%BA%E4%BE%8B%E8%AE%B2%E8%AE%B2%E6%8A%BD%E8%B1%A1%E4%BA%8C%E6%9C%9F/</guid><description>参考链接 依赖反转相关 righting software 读书笔记 关注公众号获得更多精彩文章</description></item><item><title>处理 Go 中的 'connection reset by peer' 错误</title><link>/2022/07/28/connection-reset-by-peer/</link><pubDate>Thu, 28 Jul 2022 17:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/2022/07/28/connection-reset-by-peer/</guid><description>原文链接：https://gosamples.dev/connection-reset-by-peer/ 这connection reset by peer是在另一端（对等方）意外关闭连接时发生的TCP/IP错误。 当你从你的一端发送一个数据包，但另一端崩溃并强行关闭与RST 数据包的连接而不是TCP FIN 正常情况下用于关闭连接的连接时，就会发生这种情况。在 Go 中，您可以connection reset by peer通过检查对等方返回的错误是否等于 来检测syscall.ECONNRESET 。
重现connection reset by peer错误 我们可以通过创建执行以下操作的服务器和客户端来重现错误：
服务器读取一个字节然后关闭连接 客户端发送超过一个字节 如果服务器使用套接字接收缓冲区中的剩余字节关闭连接，则RST向客户端发送一个数据包。当客户端试图从这样一个关闭的连接中读取时，它会得到connection reset by peer错误。
请参阅以下示例，该示例模拟了此行为。
package main import ( &amp;quot;errors&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net&amp;quot; &amp;quot;os&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;time&amp;quot; ) func server() { listener, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:8080&amp;quot;) if err != nil { log.Fatal(err) } defer listener.Close() conn, err := listener.Accept() if err != nil { log.Fatal(&amp;quot;server&amp;quot;, err) os.Exit(1) } data := make([]byte, 1) if _, err := conn.</description></item></channel></rss>