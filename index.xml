<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lbbniu</title>
    <link>https://blog.lbbniu.com/</link>
    <description>Recent content on lbbniu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor>
    <webMaster>lbbniu@gmail.com (lbbniu)</webMaster>
    <copyright>(c) 2021 lbbniu.</copyright>
    <lastBuildDate>Sat, 20 Nov 2021 20:33:21 +0800</lastBuildDate><atom:link href="https://blog.lbbniu.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo &#43; Github Actions 实现自动化部署</title>
      <link>https://blog.lbbniu.com/2021/11/20/hugo-github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Sat, 20 Nov 2021 20:33:21 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/2021/11/20/hugo-github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</guid>
      <description>参考连接  Hugo + Github Actions 实现自动化部署 GitHub Actions 实战 - 用 Hugo 自动构建 搭建 GitHub Pages HUGO + Github + Github Action持续集成部署个人博客  </description>
    </item>
    
    <item>
      <title>Docker修改默认网段</title>
      <link>https://blog.lbbniu.com/2021/11/20/docker%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BD%91%E6%AE%B5/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/2021/11/20/docker%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BD%91%E6%AE%B5/</guid>
      <description>(03-25) 892. 三维形体的表面积 class Solution { /** * @param Integer[][] $grid * @return Integer */ function surfaceArea($grid) { $n = count($grid); $area = 0; for ($i = 0; $i &amp;lt; $n; $i++) { for ($j = 0; $j &amp;lt; $n; $j++) { $level = $grid[$i][$j]; if ($level &amp;gt; 0) { //贡献的面积 &amp;lt;&amp;lt; 2 相当于 * 4  $area += 2 + ($level &amp;lt;&amp;lt; 2); //减去重合的面积 &amp;lt;&amp;lt; 1 相当于 * 2  $area -= $i &amp;gt; 0 ?</description>
    </item>
    
    <item>
      <title>fabric一些简单用法总结</title>
      <link>https://blog.lbbniu.com/2021/11/20/fabric%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/2021/11/20/fabric%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>1.支持中文
#!/usr/bin/python env # -*- coding: utf-8 -*- 2.支持颜色
from fabric.colors import * print(red(&amp;#34;红色&amp;#34;) + green(&amp;#34;绿色&amp;#34;，bold=False) + blue(&amp;#34;蓝色&amp;#34;,bold=True) + white(&amp;#34;白色&amp;#34;) + yellow(&amp;#34;黄色&amp;#34;) + cyan(&amp;#34;蓝绿色&amp;#34;) + magenta(&amp;#34;品红色&amp;#34;)) 3.设置主机组及账号密码
主机密码不同时：
env.hosts = [&amp;#39;tomcat@192.168.244.128&amp;#39;,&amp;#39;tomcat@192.168.244.129&amp;#39;] env.passwords = {&amp;#39;tomcat@192.168.244.128:22&amp;#39;:&amp;#39;111111&amp;#39;,&amp;#39;tomcat@192.168.244.129:22&amp;#39;:&amp;#39;111111&amp;#39;} 主机密码相同时:
env.hosts=[ &amp;#39;tomcat@192.168.244.128:22&amp;#39;, &amp;#39;tomcat@192.168.244.129:22&amp;#39;, ] env.password = &amp;#39;1111&amp;#39; 使用ssh keyfile:
env.key_filename = [&amp;#39;/opt/fab/server_key&amp;#39;] env.user = &amp;#39;tomcat&amp;#39; env.password = &amp;#39;111111&amp;#39; env.port = &amp;#39;2862&amp;#39; 4.运行shell命令
在本地运行命令:
local(&amp;#39;pwd&amp;#39;) local(&amp;#39;set -m ; /etc/init.d/tomcat restart&amp;#39;) # 如果是脚本，要加set -m 支持后台执行并返回状态，否则会报错 在服务器上运行命令:
run(&amp;#39;uname -a&amp;#39;) 5.</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://blog.lbbniu.com/study/leetcode/leetcode/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/leetcode/leetcode/</guid>
      <description>数组和链表 206. 反转链表 24. 两两交换链表中的节点 141. 环形链表 142. 环形链表 II 24. 两两交换链表中的节点  21. 合并两个有序链表 25.K 个一组翻转链表 86.分隔链表 92.反转链表 II /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* reverseBetween(ListNode* head, int m, int n) { int change_len = n - m + 1; ListNode *pre_head = NULL; ListNode *result = head; while (head &amp;amp;&amp;amp; --m) { pre_head = head; head = head-&amp;gt;next; } ListNode *modify_list_tail = head; ListNode *new_head = NULL; while (head &amp;amp;&amp;amp; change_len--) { ListNode *next = head-&amp;gt;next; head-&amp;gt;next = new_head; new_head = head; head = next; } //连接为翻转部分  modify_list_tail-&amp;gt;next = head; if (pre_head) { pre_head-&amp;gt;next = new_head; } else { result = new_head; } return result; } }; /** * Definition for a singly-linked list.</description>
    </item>
    
    <item>
      <title>LeetCode每日一题</title>
      <link>https://blog.lbbniu.com/study/leetcode/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/leetcode/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</guid>
      <description>03-26 999. 车的可用捕获量 class Solution { /** * @param String[][] $board * @return Integer */ function numRookCaptures($board) { $cnt = $st = $ed = 0; //查找车  for ($i =0 ; $i &amp;lt; 8; $i++) { for ($j = 0; $j &amp;lt; 8; $j++) { if ($board[$i][$j] == &amp;#39;R&amp;#39;) { $st = $i; $ed = $j; break; } } } //遍历扩散  $dx = [-1, 1, 0, 0]; $dy = [0, 0, -1, 1]; for ($i = 0; $i &amp;lt; 4; $i++) { for ($step = 0;; $step++){ $x = $st + $dx[$i] * $step; $y = $ed + $dy[$i] * $step; //遇到边界或者白色的象  if ($x &amp;lt; 0 || $x &amp;gt;= 8 || $y &amp;lt; 0 || $y &amp;gt;= 8 || $board[$x][$y] ==&amp;#39;B&amp;#39;) break; if ($board[$x][$y] == &amp;#39;p&amp;#39;) { $borad[$x][$y] = &amp;#39;.</description>
    </item>
    
    <item>
      <title>nginx lua直接阶段</title>
      <link>https://blog.lbbniu.com/2021/11/20/nginx-lua%E7%9B%B4%E6%8E%A5%E9%98%B6%E6%AE%B5/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/2021/11/20/nginx-lua%E7%9B%B4%E6%8E%A5%E9%98%B6%E6%AE%B5/</guid>
      <description>对刚接触Ngx_lua的读者来说，可能会存在下面两个困惑。
 1、Lua在Nginx的哪些阶段可以执行代码？ 2、Lua在Nginx的每个阶段可以执行哪些操作？
只有理解了这两个问题，才能在业务中巧妙地利用Ngx_Lua来完成各项需求。
Nginx的11个执行阶段，每个阶段都有自己能够执行的指令，并可以实现不同的功能。Ngx_Lua的功能大部分是基于Nginx这11个执行阶段开发和配置的，Lua代码在这些指令块中执行，并依赖于它们的执行顺序。本章将对Ngx_Lua的执行阶段进行一一讲解。
 一、 init_by_lua_block init_by_lua_block是init_by_lua的替代版本，在OpenResty 1.9.3.1或Lua-Nginx-Modulev 0.9.17之前使用的都是init_by_lua。init_by_lua_block比init_by_lua更灵活，所以建议优先选用init_by_lua_block。 本章中的执行阶段都采用*_block格式的指令，后续不再说明。
1.1　阶段说明 语法：init_by_lua_block {lua-script-str} 配置环境：http 阶段：loading-config 含义：当Nginx的master进程加载Nginx配置文件（加载或重启Nginx进程）时，会在全局的Lua VM（Virtual Machine，虚拟机）层上运行指定的代码，每次当Nginx获得HUP（即Hangup）重载信号加载进程时，代码都会被重新执行。
*1.2　初始化配置* 在loading-config阶段一般会执行如下操作。 1．初始化Lua全局变量，特别适合用来处理在启动master进程时就要求存在的数据，对CPU消耗较多的功能也可以在此处处理。 2．预加载模块。 3．初始化lua_shared_dict共享内存的数据（关于共享内存详见第10章）。 示例如下：
user webuser webuser; worker_processes 1; worker_rlimit_nofile 10240; events { use epoll; worker_connections 10240; } http { include mime.types; default_type application/octet-stream; log_format main &#39;$remote_addr-$remote_user[$time_local] &amp;quot;$request&amp;quot; &#39; &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39; &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot; &amp;quot;$request_time&amp;quot; &amp;quot;$upstream_addr $upstream_status $upstream_response_time&amp;quot; &amp;quot;upstream_time_sum:$upstream_time_sum&amp;quot; &amp;quot;jk_uri:$jk_uri&amp;quot;&#39;; access_log logs/access.log main; sendfile on; keepalive_timeout 65; lua_package_path &amp;quot;/usr/local/nginx_1.</description>
    </item>
    
    <item>
      <title>OpenVpn搭建</title>
      <link>https://blog.lbbniu.com/2021/11/20/openvpn%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/2021/11/20/openvpn%E6%90%AD%E5%BB%BA/</guid>
      <description>初始化 # 证书密码见服务器 mm.md # 创建目录 mkdir -p /data/openvpn/conf # 初始化 openvpn 配置 docker run -v /data/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.lbbniu.com # 初始化证书 根据提示数据证书密码和组织名称 docker run -v /data/openvpn:/etc/openvpn --rm -ti kylemanna/openvpn ovpn_initpki # 增加用户 docker run -v /data/openvpn:/etc/openvpn --rm -ti kylemanna/openvpn easyrsa build-client-full lbbniu nopass # 导出用户配置文件 docker run -v /data/openvpn:/etc/openvpn --rm -ti kylemanna/openvpn ovpn_getclient lbbniu &amp;gt; /data/openvpn/conf/lbbniu.ovpn # 启动服务 docker run --name openvpn -v /data/openvpn:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn 添加用户脚本 #!</description>
    </item>
    
    <item>
      <title>微明互动参与项目列表</title>
      <link>https://blog.lbbniu.com/2021/11/20/%E5%BE%AE%E6%98%8E%E4%BA%92%E5%8A%A8%E5%8F%82%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/2021/11/20/%E5%BE%AE%E6%98%8E%E4%BA%92%E5%8A%A8%E5%8F%82%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</guid>
      <description>2014-2016项目 云热卖 app38 联联 app45 李宁酷跑 app46 htc新渴望 app47 沃尔玛动态贺卡生成器 app49 联信 app50 第九屏 app52/d9ping htc新渴望8 app53 六推云平台 app54 搜狗极限科考 app55 360安全第一 app57 红旗 app59 海尔智慧答题 app60 多喜爱手机端 app61 联想thinkpad app62 斯巴鲁汽车 app64 联想thinkpad 联想禁止随地办公 app66 苏泊尔厨具 app70 亚马逊2048 app71 王老吉疯狂2048 app73 联想刮刮乐 app74 淘手游网站改版（YII框架） 巴布豆（手机和pc） app75 htc one m8申请 app76 高德地图lbs大赛 app77 htc one预约（手机和pc） app78 华为Meta7手机 app79 51jobs统计数据 app80 海尔口袋体验馆 app81 丰田一期 相信自己 app83 htc五月天 app84 海尔问题查询 app85 丰田二期项目 app86 特百惠 app87 特百惠外带小萌 app89 一汽大众 app90 搜狗手机活动项目 app91 全球购 微信项目（微信支付） app92 thinkphp intel大赛项目 app94 联通邀请函 app95 百佳手机 app96 IBM下载中心 app97 2015.</description>
    </item>
    
    <item>
      <title>第八课动态规划</title>
      <link>https://blog.lbbniu.com/study/batj%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/8.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/batj%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/8.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>70. 爬楼梯 class Solution { public: int climbStairs(int n) { std::vector&amp;lt;int&amp;gt; dp(n + 3, 0); dp[1] = 1; dp[2] = 1; for (int i = 3; i &amp;lt;= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } }; 198. 打家劫舍 class Solution { public: int rob(vector&amp;lt;int&amp;gt;&amp;amp; nums) { if (nums.size() == 0) { return 0; } if (nums.size() == 1) { return nums[0]; } //设第一个房间的最优解dp[i]  std::vector&amp;lt;int&amp;gt; dp(nums.</description>
    </item>
    
    <item>
      <title>解决k8s rook 安装镜像无法拉去</title>
      <link>https://blog.lbbniu.com/k8s/k8s/</link>
      <pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/k8s/k8s/</guid>
      <description>解决 rook 安装镜像无法拉去 docker pull registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 docker tag registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.3.0 docker rmi registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 docker pull registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0 docker tag registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0 k8s.gcr.io/sig-storage/csi-provisioner:v3.0.0 docker rmi registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0 docker pull registry.aliyuncs.com/google_containers/csi-resizer:v1.3.0 docker tag registry.aliyuncs.com/google_containers/csi-resizer:v1.3.0 k8s.gcr.io/sig-storage/csi-resizer:v1.3.0 docker rmi registry.aliyuncs.com/google_containers/csi-resizer:v1.3.0 docker pull registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0 docker tag registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0 k8s.gcr.io/sig-storage/csi-attacher:v3.3.0 docker rmi registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0 docker pull registry.aliyuncs.com/google_containers/csi-snapshotter:v4.2.0 docker tag registry.aliyuncs.com/google_containers/csi-snapshotter:v4.2.0 k8s.gcr.io/sig-storage/csi-snapshotter:v4.2.0 docker rmi registry.aliyuncs.com/google_containers/csi-snapshotter:v4.2.0 docker pull registry.aliyuncs.com/google_containers/ docker tag registry.aliyuncs.com/google_containers/ k8s.gcr.io/sig-storage/ docker rmi registry.aliyuncs.com/google_containers/ </description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://blog.lbbniu.com/about/</link>
      <pubDate>Sat, 20 Nov 2021 15:22:23 +0800</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/about/</guid>
      <description>个人简介  8年互联网行业技术开发经验及3年项目管理经验 熟悉微服务、单体架构开发 具备架构高性能、高并发、大流量的分布式系统架构设计和实现经验。熟悉AI和区块链的相关技术。 专业技术全面，对HTML5、云计算、区块链等前沿技术都有所了解，对业内技术方向能够很好把控。 有互联网、云服务、移动端、微信小程序、系统级大型项目建设等经验。 丰富的项目管理经验：能够负责整个项目从需求到结项各环节的实施。 最高管理过25人的技术团队。  职业技能  3年Go和8年PHP开发 精通TarsGo微服务框架的使用和实现原理 熟悉Docker、K8s和Serverless技术 精通Swoole、Hyperf开发框架 精通亿级爬虫系统的开发和维护部署 掌握常用PHP开发框架的使用 掌握常用分布式锁的解决方案 熟练掌握Android逆向分析工具的使用 熟悉常用算法和数据结构、设计模式、操作系统、并发、事务、多线程、TCP协议 熟练掌握各类Linux命令、自动化运维工具 精通MySQL、MongoDB常用数据库 熟练Redis、Memcached等缓存技术 熟练掌握常用消息队列的使用，如Beanstalkd、Kafka 熟悉前端VueJs、Egret框架的使用 熟悉区块链技术的代币发放、智能合约编写 了解Nodejs、Python、Lua、Java开发语言  工作经历 2020.09—至今 好未来集团中台 PHP/Go高级工程师  负责Tars框架消息服务容器化 负责全局消息ID和敏感词黑名单过滤服务开发 负责消息接入调度服务开发 负责哮天犬告警系统开发  2018.10—2020.09 北京七麦科技股份有限公司 PHP资深工程师  负责iOS和各大安卓应用市场整个数据抓取业务的开发、维护、优化（每日抓取次数高大6亿次） 负责安卓各大应用市场接口签名的逆向分析破解 负责MySQL数据库和Api接口优化 负责服务器的部署和日常运维  2014.03—2018.09 北京微明互动信息技术有限公司 技术主管  负责公司项目整体技术架构选型，包括iOS、Android、PHP、Web、爬虫、微信小程序、H5、小游戏等。 负责公司技术团队管理、研发人员招聘、培训与考核。 负责项目架构、框架设计，技术难点攻关 负责团队技术的前沿技术研究。  项目经验 项目：消息服务  使用Hyperf从0重构消息服务调度系统的控制面和API的功能，实现高性能、高并发、高可用(双活)的调度服务，统一收敛培优、网校等业务平滑迁移至新调度服务。 主导Tars消息服务容器化方案的制定、实施、部署、压测全过程，实现消息服务从ECS平滑迁移至K8s容器环境，节省服务器资源60%以上，参与学而思网校暑期保障工作。 负责服务消息全局ID服务的架构设计和开发，原敏感词黑名单过滤服务进行重构优化，支持特殊字符替换、忽略大小写，并零故障平滑过渡上线。  项目：七麦数据、抖V数据【2018.09-2020.09】  引入Cronsun开源定时任务管理系统方便了现有定时任务，完善现有服务监控机制和自动恢复机制。 完成华为、豌豆荚、Oppo、百度等安卓应用市场接口签名算法的逆向还原，解决原有抓取只能从Web抓取的状态。 优化App关键词历史覆盖和联想词智查历史写入机制，提升3-10倍的速度。 iOS关键词搜索结果抓取一期性能优化采用Swoole协程方案重写，并利用Reids实现代理池策略；二期性能优化使用go-colly重写，提升现有抓取速度、并减少服务资源。 2020年5月作为核心参与人员制定和实施阿里云到腾讯云的整个迁移方案，并在一个月完成所有迁移的任务，其中主要负责MongoDB、Redis、MySQL、Memcached、ES、Beanstalkd、Web服务器等核心系统迁移工作，实现0停机迁移，并未出现数据不一致的情况。 使用Xposed+Sekiro搭建抖音签名服务，逆行分析抖音直播IM消息Protobuf协议，从而完成直播互动数据抓取。  APICloud项目：淘老外、京美考等  负责各个项目后端框架选型、核心模块的编写、制定编码规范，后端采用Laravel框架，App端均采用APICloud实现Adronid和iOS跨平台开发方案。 淘老外中主要负责视频教学核心模块的功能编写和制定腾讯音视频SDK APICloud模块接口，对接Adronid和IOS模块开发人员，最终实现使用模块为App实现在线视频通话功能，并用Swoole搭建WebSocket服务实现IM功能。 京美考中负责CC视频SDK封装为APICloud模块实现视频的在线点播功能，在Laravel中集成ElasticSearch实现全文搜索需求。  微信小程序项目：呵呵Life、矩阵元活动管理 项目中做为开发负责人，主要负责框架搭建和小程序接口开发、小程序对接后端接口、部署、协调资源、技术选型等工作。项目管理后台采用Laravel+VueJs+ElementUI技术方案完成开发，实现前后端分离。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC10%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC10%E5%91%A8/</guid>
      <description>期末串讲 参考连接 Big O Cheat Sheet 算法训练营第 4 期学员谭帅的脑图作业（提取码：ykyn） Steve Jobs 演讲 期末考试 👉考试形式：考试平台为 LeetCode。 共 10 道单选题（每题 3 分）、2 道多选题（每题 5 分）、2 道编程题（每题 20 分）和 4 道附加选择题（每题 5 分），考试时长 3 小时。3 小时内可多次修改和提交，最终全部完成后点击“结束考试”即可。
注意：为保证评测体验，需要使用 Chrome 浏览器 注意：考试前不要尝试进入系统，进入系统即开始计时，3 小时为不间断计时，关闭网页不会暂停，仍在继续计时 注意：每道选择题务必点击提交再进行下一题
👉考试系统须知： https://shimo.im/docs/786914580242497f
👉登陆账号密码：均为你极客时间登陆时的手机帐号，如无法登陆，请联系班主任确认。
👉考试日期：截止至 2020 年 5 月 24 日 23:59
👉考试链接： https://e.leetcode-cn.com/assessment/geekbang-0019
本周是大家学习的最后一周，训练营学习服务团队希望能得到大家的建议和反馈，动动你的小手，填一下问卷吧！👉 https://jinshuju.net/f/ER0LhF
另外，如果你想换工作，不知道怎么写简历，可以看下这篇文章。
毕业刷题路线 首先，恭喜各位同学从极客大学算法训练营毕业，相信 70 天的刻意练习给你带来了不少改变。但是毕业后的练习还不能停止，除了课上老师讲授的题目和布置的作业，这里还有一份“左耳朵耗子”陈皓老师和超哥分享的毕业刷题路线，助你在训练营结束后持续练习。
基础 两数之和（简单） 有效的括号（简单） 字符串解码（中等） LRU 缓存机制（困难） 实现 Trie（前缀树）（中等） 添加与搜索单词 - 数据结构设计（中等） 单词搜索 II （困难） 找不同（简单） 单词规律（简单） 字符串中的第一个唯一字符（简单） 无重复字符的最长子串（中等） 最小覆盖子串（困难） 合并两个有序链表（简单） 环形链表（简单） 环形链表 II （中等） 反转链表（简单） 反转链表 II （中等） 旋转链表（中等） 排序链表 链表中倒数第 k 个节点 两两交换链表中的节点（中等） 按奇偶排序数组（简单） 按奇偶排序数组 II （简单） 有序数组的平方（简单） 山脉数组的峰顶索引（简单） 搜索旋转排序数组（困难） 搜索旋转排序数组 II （中等） 寻找旋转排序数组中的最小值（中等） 寻找旋转排序数组中的最小值 II （困难） 搜索二维矩阵（中等） 等式方程的可满足性（中等） 朋友圈（中等） 账户合并（中等） 深度优先搜索 二叉树的最大深度（简单） 路径总和（简单） 路径总和 II （中等） 被围绕的区域（中等） 岛屿数量（中等） 岛屿的最大面积（中等） 在二叉树中分配硬币（中等） 回溯 括号生成（中等） N 皇后（困难） N 皇后 II （困难） 解数独 （中等） 不同路径 III （困难） 单词搜索（中等） 分治 搜索二维矩阵 II （中等） 合并 K 个排序链表（中等） 为运算表达式设计优先级（中等） 给表达式添加运算符（困难） 数组中的第 K 个最大元素（中等） 最接近原点的 K 个点（中等） 鸡蛋掉落（困难） 动态规划 使用最小花费爬楼梯（简单） 爬楼梯（简单） 不同路径（简单） 最小路径和 （中等） 最大子序和 （简单） 乘积最大子数组（中等） 买卖股票的最佳时机（简单） 买卖股票的最佳时机 II （简单） 买卖股票的最佳时机 III （困难） 买卖股票的最佳时机 IV （困难） 最佳买卖股票时机含冷冻期（中等） 买卖股票的最佳时机含手续费（中等） 零钱兑换 （中等） 零钱兑换 II （中等） 编辑距离（困难） 不同的子序列（困难） 柱状图中最大的矩形（困难） 最大矩形（困难） 最大正方形（中等） 最低票价（中等） 区域和检索 - 数组不可变（简单） 二维区域和检索 - 矩阵不可变（中等） 最长上升子序列 （中等） 鸡蛋掉落（困难） </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC1%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC1%E5%91%A8/</guid>
      <description>第三课|数组、链表、跳表 1. 数组、链表、跳表的基本实现和特性 参考链接 Java 源码分析（ArrayList） Linked List 的标准实现代码 [Linked List 示例代码](http://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked Lists/code/LinkedList.java) Java 源码分析（LinkedList） LRU Cache - Linked list：LRU 缓存机制 Redis - Skip List：跳跃表、为啥 Redis 使用跳表（Skip List）而不是使用 Red-Black？ 2. 实战题目解析：移动零 3. 实战题目解析：盛水最多的容器、爬楼梯 Array 实战题目 11. 盛最多水的容器 283. 移动零 70. 爬楼梯 15. 三数之和(高频老题） 4. 实战题目解析：3数之和、环形链表 两数之和题目：https://leetcode-cn.com/problems/two-sum/
Linked List 实战题目 206. 反转链表  使用递归函数，一直递归到链表的最后一个结点，该结点就是反转后的头结点，记作 ret . 此后，每次函数在返回的过程中，让当前结点的下一个结点的 next 指针指向当前节点。 同时让当前结点的 next 指针指向 NULL ，从而实现从链表尾部开始的局部反转 当递归函数全部出栈后，链表反转完成。  24. 两两交换链表中的节点 141. 环形链表 142. 环形链表 II 25.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC6%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC6%E5%91%A8/</guid>
      <description>第12课 动态规划 1.动态规划的实现与关键点 参考连接 递归代码模板 # go 代码模板 func recursion(level int, param1, param2, ...) { # recursion terminator if level &amp;gt; MAX_LEVEL { process_result return } # process logic in current level process(level, data...) # drill down recursion(level + 1, p1, ...) # reverse the current level status if needed } 分治代码模板 func divide_conquer(problem, param1, param2, ...) { # recursion terminator if problem == nil { print_result return } # prepare data data = prepare_data(problem) subproblems = split_problem(problem, data) # conquer subproblems subresult1 = divide_conquer(subproblems[0], p1, .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC9%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E7%AC%AC9%E5%91%A8/</guid>
      <description>第19课 | 高级动态规划 1. 动态规划、状态转移方程串讲 参考链接 70.爬楼梯 62.不同路径 63. 不同路径 II 一维dp写法
198.打家劫舍 64.最小路径和 121.股票买卖 课后作业 在第 9 周学习总结中，写出63. 不同路径 II这道题目的状态转移方程。
2. 高级动态规划题目详解 参考链接 70.爬楼梯 746.使用最小花费爬楼梯 72.编辑距离 课后作业 300. 最长上升子序列 91. 解码方法 32. 最长有效括号 85. 最大矩形 115. 不同的子序列 818. 赛车 第20课 | 字符串算法 1. 字符串基础知识和引申题目 参考链接 不可变字符串 Atoi 代码示例 字符串基础问题 709. 转换成小写字母 58. 最后一个单词的长度 771. 宝石与石头 387. 字符串中的第一个唯一字符 8. 字符串转换整数 (atoi) 字符串操作问题 14. 最长公共前缀 344. 反转字符串 541. 反转字符串 II 151. 翻转字符串里的单词 557.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/go/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid>
      <description>云账户 https://docs.qq.com/doc/DTWlXakVOR3lnTU1N
/** 给定一个包括 &amp;#39;(&amp;#39;，&amp;#39;)&amp;#39;，&amp;#39;{&amp;#39;，&amp;#39;}&amp;#39;，&amp;#39;[&amp;#39;，&amp;#39;]&amp;#39; 和&amp;#39;*&amp;#39;干扰字符的字符串，判断字符串是否有效。 例： {**[*()*(**)**]**} 输出true {**[**)**(**]**} 输出false */ 快手 260. 只出现一次的数字 III 腾讯 168. Excel表列名称 72. 编辑距离  字节 package main import &amp;#34;fmt&amp;#34; func calc(x, y int) int { fmt.Println(x, y, x+y) return x + y } func main() { a := 1 b := 2 defer calc(a, calc(a, b)) a = 0 defer calc(a, calc(a, b)) } 200. 岛屿数量 128. 最长连续序列 蓝湖 n 个数有序数组合并 探探 139.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/00%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E9%A2%84%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/00%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E9%A2%84%E4%B9%A0/</guid>
      <description>预习 第一课 预习 第二课 预习知识点  数组：为什么很多编程语言中数组都从 0 开始编号？ 链表：如何实现 LRU 缓存淘汰算法? 链表：如何轻松写出正确的链表代码？ 跳表：为什么 Redis 一定要用跳表来实现有序集合？  预习题目  移动零 盛最多水的容器 爬楼梯 三数之和 环形链表  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/01%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%80%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/01%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%80%E5%91%A8/</guid>
      <description>第一周 第三课|数组、链表、跳表 参考链接  Java 源码分析（ArrayList） Linked List 的标准实现代码 [Linked List 示例代码](http://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked Lists/code/LinkedList.java) Java 源码分析（LinkedList） LRU Cache - Linked list：LRU 缓存机制 Redis - Skip List：跳跃表、为啥 Redis 使用跳表（Skip List）而不是使用 Red-Black？  Array 实战题目 11. 盛最多水的容器 //方法一： 暴力求解 双循环 class Solution { /** * @param Integer[] $height * @return Integer */ function maxArea($height) { $max = 0; $len = count($height); for ($i = 0; $i &amp;lt; $len - 1; $i++) { for ($j = $i + 1; $j &amp;lt; $len; $j++) { $area = ($j - $i) * min($height[$i], $height[$j]); $max = $area &amp;lt; $max ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/02%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%BA%8C%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/02%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%BA%8C%E5%91%A8/</guid>
      <description>第2周 第4课 | 栈、队列、优先队列、双端队列 参考链接  Java 的 PriorityQueue 文档 Java 的 Stack 源码 Java 的 Queue 源码 Python 的 heapq 高性能的 container 库  预习题目 20. 有效的括号 class Solution { /** * 方法一：栈(spl标准库) * @param String $s * @return Boolean */ function isValid($s) { //构造哈希表 	$map = [&amp;#39;)&amp;#39;=&amp;gt;&amp;#39;(&amp;#39;, &amp;#39;]&amp;#39;=&amp;gt;&amp;#39;[&amp;#39;, &amp;#39;}&amp;#39;=&amp;gt;&amp;#39;{&amp;#39;]; $stack = new SplStack(); for ($i = 0, $len = strlen($s); $i &amp;lt; $len; $i++) { if (!isset($map[$s[$i]])) { $stack-&amp;gt;push($s[$i]); } else if (!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/03%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%89%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/03%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%89%E5%91%A8/</guid>
      <description>第3周 第6课 | 树、二叉树、二叉搜索树 1. 树、二叉树、二叉搜索树的实现和特性 参考链接  二叉搜索树 Demo  思考题 树的面试题解法一般都是递归，为什么？ 说明：同学们可以将自己的思考写在课程下方的留言区一起讨论，也可以写在第 2 周的学习总结中。
2. 实战题目解析：二叉树的中序遍历 参考链接  树的遍历 Demo  实战题目 / 课后作业 94. 二叉树的中序遍历 /** * Definition for a binary tree node. * class TreeNode { * public $val = null; * public $left = null; * public $right = null; * function __construct($value) { $this-&amp;gt;val = $value; } * } */ class Solution { private $values = []; /** * 方法一：递归 * @param TreeNode $root * @return Integer[] */ function inorderTraversal1($root) { $this-&amp;gt;inorder($root); return $this-&amp;gt;values; } function inorder($root) { if ($root) { $this-&amp;gt;inorder($root-&amp;gt;left); $this-&amp;gt;values[] = $root-&amp;gt;val; $this-&amp;gt;inorder($root-&amp;gt;right); } } /** * 方法二：迭代 * @param TreeNode $root * @return Integer[] */ function inorderTraversal2($root) { $stack = $res = []; while ($root || $stack) { while ($root) { $stack[] = $root; $root = $root-&amp;gt;left; } $root = array_pop($stack); $res[] = $root-&amp;gt;val; $root = $root-&amp;gt;right; } return $res; } /** * 方法三：颜色标记法 * @param TreeNode $root * @return Integer[] */ function inorderTraversal3($root) { $white = 0; $gray = 1; $stack = [[$white, $root]]; $res = []; while ($stack) { [$color, $node ] = array_pop($stack); if (!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/04%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%9B%9B%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/04%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%9B%9B%E5%91%A8/</guid>
      <description>第4周 第9课 | 深度优先搜索和广度优先搜索 1. 深度优先搜索、广度优先搜索的实现和特性 参考链接 DFS 代码模板（递归写法、非递归写法） 递归写法
visited = set() def dfs(node, visited): if node in visited: # terminator # already visited  return visited.add(node) # process current node here.  ... for next_node in node.children(): if next_node not in visited: dfs(next_node, visited) 非递归写法
def DFS(self, tree): if tree.root is None: return [] visited, stack = [], [tree.root] while stack: node = stack.pop() visited.add(node) process (node) nodes = generate_related_nodes(node) stack.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/04%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%9B%9B%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/04%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%9B%9B%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>DFS 代码模板（递归写法、非递归写法） 递归写法
visited = set() def dfs(node, visited): if node in visited: # terminator # already visited  return visited.add(node) # process current node here.  ... for next_node in node.children(): if next_node not in visited: dfs(next_node, visited) 非递归写法
def DFS(self, tree): if tree.root is None: return [] visited, stack = [], [tree.root] while stack: node = stack.pop() visited.add(node) process (node) nodes = generate_related_nodes(node) stack.push(nodes) # other processing work  .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/06%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AD%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/06%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AD%E5%91%A8/</guid>
      <description>第12课 | 动态规划 1. 动态规划的实现及关键点 参考链接   递归代码模板
# Python 代码模板 def recursion(level, param1, param2, ...): # recursion terminator  if level &amp;gt; MAX_LEVEL: process_result return # process logic in current level  process(level, data...) # drill down  self.recursion(level + 1, p1, ...) # reverse the current level status if needed //Java 代码模板 public void recur(int level, int param) { // terminator  if (level &amp;gt; MAX_LEVEL) { // process result  return; // process current logic  process(level, param); // drill down  recur( level: level + 1, newParam); // restore current status }   分治代码模板</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/07%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%83%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/07%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%83%E5%91%A8/</guid>
      <description>第7周 第13课 | 字典树和并查集 1. Trie树的基本实现和特性 参考链接 102. 二叉树的层序遍历 /** * Definition for a binary tree node. * class TreeNode { * public $val = null; * public $left = null; * public $right = null; * function __construct($value) { $this-&amp;gt;val = $value; } * } */ class Solution { /** * bfs * @param TreeNode $root * @return Integer[][] */ function levelOrder($root) { if (!$root) return []; $queue = [$root]; $res = []; while ($queue) { $count = count($queue); $row = []; while ($count--) { $node = array_shift($queue); $row[] = $node-&amp;gt;val; $node-&amp;gt;left &amp;amp;&amp;amp; $queue[] = $node-&amp;gt;left; $node-&amp;gt;right &amp;amp;&amp;amp; $queue[] = $node-&amp;gt;right; } $res[] = $row; } return $res; } //  function levelOrder($root) { if (!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/08%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AB%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/08%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AB%E5%91%A8/</guid>
      <description>第8周 第16课 | 位运算 1. 位运算基础及实战要点 参考链接 如何从十进制转换为二进制 2. 位运算实战题目解析 参考链接 N 皇后位运算代码示例 def totalNQueens(self, n): if n &amp;lt; 1: return [] self.count = 0 self.DFS(n, 0, 0, 0, 0) return self.count def DFS(self, n, row, cols, pie, na): # recursion terminator  if row &amp;gt;= n: self.count += 1 return bits = (~(cols | pie | na)) &amp;amp; ((1 &amp;lt;&amp;lt; n) — 1) # 得到当前所有的空位 while bits: p = bits &amp;amp; —bits # 取到最低位的1 bits = bits &amp;amp; (bits — 1) # 表示在p位置上放入皇后 self.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/09%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B9%9D%E5%91%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>lbbniu@gmail.com (lbbniu)</author>
      <guid>https://blog.lbbniu.com/study/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5/php/09%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B9%9D%E5%91%A8/</guid>
      <description>第9周 第19课 | 高级动态规划 1. 动态规划、状态转移方程串讲 参考链接 70.爬楼梯 class Solution { /** * 动态规划解法 * Binets 方法 和 斐波那契公式 时间复杂度为O(log(N)) * @param Integer $n * @return Integer */ function climbStairs($n) { if ($n &amp;lt;= 2) return $n; $first = 1; $second = 2; for ($i = 3; $i &amp;lt;= $n; $i++) { $tmp = $first + $second; $first = $second; $second = $tmp; } return $second; } } //斐波那契公式 public class Solution { public int climbStairs(int n) { double sqrt5=Math.</description>
    </item>
    
  </channel>
</rss>
