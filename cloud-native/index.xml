<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云原生笔记 on lbbniu</title><link>/cloud-native/</link><description>Recent content in 云原生笔记 on lbbniu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>lbbniu@gmail.com (lbbniu)</managingEditor><webMaster>lbbniu@gmail.com (lbbniu)</webMaster><copyright>&amp;copy; 2021 &lt;a href="https://blog.lbbniu.com/">lbbniu&lt;/a></copyright><lastBuildDate>Sat, 20 Nov 2021 17:18:16 +0800</lastBuildDate><atom:link href="/cloud-native/index.xml" rel="self" type="application/rss+xml"/><item><title>KubeSphere 安装</title><link>/cloud-native/kubesphere/</link><pubDate>Fri, 01 Jul 2022 15:20:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/kubesphere/</guid><description>KubeSphere | Stopping if default StorageClass was not found local-storage.yaml https://kubesphere.com.cn/forum/d/3705-kubernetes-stop-if-storageclass-was-not-found https://github.com/kubesphere/kubesphere/issues/4558 https://kubesphere.com.cn/forum/d/7194-kubekeyk8skubesphere-default-storageclass-was-not-found https://blog.imdst.com/kubernetesshang-an-zhuang-kubesphere/ kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: annotations: storageclass.kubernetes.io/is-default-class: &amp;quot;true&amp;quot; name: local-storage provisioner: kubernetes.io/no-provisioner volumeBindingMode: WaitForFirstConsumer kubectl apply -f https://mirror.ghproxy.com/https://github.com/kubesphere/ks-installer/releases/download/v3.3.0/kubesphere-installer.yaml kubectl apply -f https://mirror.ghproxy.com/https://github.com/kubesphere/ks-installer/releases/download/v3.3.0/cluster-configuration.yaml kubectl get svc/ks-console -n kubesphere-system ssh -L 30880:10.100.128.134:30880 -p 10088 root@10.90.100.19 ssh -L 30880:localhost:30880 -p 10088 root@10.90.100.19 OpenEBS Local PV Hostpath User Guide https://openebs.io/docs/user-guides/localpv-hostpath helm repo add openebs https://openebs.github.io/charts helm repo update helm install --namespace openebs --name openebs openebs/openebs apiVersion: storage.</description></item><item><title>使用 Docker 在 1 分钟内完成 ClickHouse 服务器</title><link>/cloud-native/docker/clickhouse-server-in-1-minute-with-docker/</link><pubDate>Wed, 06 Apr 2022 13:00:48 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/docker/clickhouse-server-in-1-minute-with-docker/</guid><description>ClickHouse 是一个开源的面向列的 DBMS（由 Yandex 开发）。ClickHouse 的工作速度比传统方法快 100-1000 倍。 它适用于大数据、业务分析和时间序列数据。ClickHouse 是第一个与 Sybase IQ、Vertica 和 Snowflake 等专有数据库的性能、成熟度和可扩展性相匹配的开源 SQL 数据仓库。
在这个小教程中，我将向您展示如何以最少的设置安装 ClickHouse。
对于本教程，我们需要安装 Docker 和 docker-compose。
首先，您需要创建一个目录，在其中创建必要的文件和目录。
cd /home/username mkdir my-clickhouse cd my-clickhouse 然后你需要创建一个目录来存储 ClickHouse 数据。
mkdir db 最后一步是创建 docker-compose.yml 文件。
version: '3' services: ch_server: image: yandex/clickhouse-server ports: - &amp;quot;8123:8123&amp;quot; volumes: - ./db:/var/lib/clickhouse networks: - ch_ntw ch_client: image: yandex/clickhouse-client entrypoint: - /bin/sleep command: - infinity networks: - ch_ntw networks: ch_ntw: driver: bridge ipam: config: - subnet: 10.222.1.0/24 让我们检查一下我们做了什么。一个文件（docker-compose.yml）和一个目录（db）。</description></item><item><title>使用Docker一分钟搭建免费VPN</title><link>/cloud-native/%E4%BD%BF%E7%94%A8docker%E4%B8%80%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9vpn/</link><pubDate>Fri, 17 Dec 2021 09:00:48 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/%E4%BD%BF%E7%94%A8docker%E4%B8%80%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9vpn/</guid><description>在这个简短的指南中，我将向您展示如何使用现有的 Docker 镜像快速安装 OpenVPN 服务器。可以安装 OpenVPN 服务器，但使用 Docker 一切都容易得多。您无需购买第三方服务，一切都是完全免费的。
您必须拥有自己的 VPS 服务器。如果没有，您可以在 DigitalOcean 上购买 VPS。您可以购买最便宜的，每月 2 美元到 5 美元不等。
我将使用基于 Docker 的现成 VPN 解决方案：https://github.com/kylemanna/docker-openvpn 第一步所需要做的就是安装 Docker。我使用 Ubuntu 操作系统。 如果安装了 Docker，让我们继续下一步。
我将使用以下变量：
ovpn-data-example-uk - 用于数据量容器。
vpn.yourdomain.com - 该值应该是域名或 IP 地址。
uk.vpn.yourdomain.com - 它将用作客户端定义。
这些变量是测试变量。你必须使用你的变量。
让我们从创建 docker 卷开始。
docker volume create -- name ovpn - data - example - uk 下一步是初始化容器。
docker run \ -v ovpn-data-example-uk:/etc/openvpn \ --log-driver=none \ --rm \ kylemanna/openvpn \ ovpn_genconfig \ -u udp://vpn.yourdomain.com 容器将要求您输入密码来保护新生成的证书颁发机构使用的私钥。</description></item><item><title>云原生训练营作业</title><link>/cloud-native/work/</link><pubDate>Sun, 12 Dec 2021 18:53:48 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/work/</guid><description>资料 https://cncamp.notion.site/cncamp/kubernetes-8a9d48ee26284b3c8ddf9de4c62ea895 模块一：Go 语言特性 无作业
模块二：Go语言进阶 必做 编写一个 HTTP 服务器，大家视个人不同情况决定完成到哪个环节，但尽量把 1 都做完。
接收客户端 request，并将 request 中带的 header 写入 response header 读取当前系统的环境变量中的 VERSION 配置，并写入 response header Server 端记录访问日志包括客户端 IP，HTTP 返回码，输出到 server 端的标准输出 当访问 localhost/healthz 时，应返回 200 作业提交链接： https://jinshuju.net/f/PlZ3xg 提交截止时间：10 月 7 日晚 23:59 前
模块三：Docker核心技术 必做 构建本地镜像。 编写 Dockerfile 将练习 2.2 编写的 httpserver 容器化（请思考有哪些最佳实践可以引入到 Dockerfile 中来）。 将镜像推送至 Docker 官方镜像仓库。 通过 Docker 命令本地启动 httpserver。 通过 nsenter 进入容器查看 IP 配置。 作业需编写并提交 Dockerfile 及源代码。
作业提交链接： https://jinshuju.net/f/rxeJhn 提交截止时间：10 月 17 日 23:59</description></item><item><title>cert-manager 和 alidns-webhook 安装</title><link>/cloud-native/cert-manager/</link><pubDate>Wed, 08 Dec 2021 20:00:00 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/cert-manager/</guid><description>安装 https://cert-manager.io/ https://cert-manager.io/docs/installation/helm/ helm repo add jetstack https://charts.jetstack.io helm repo update # kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.6.1/cert-manager.crds.yaml wget https://hub.fastgit.org/jetstack/cert-manager/releases/download/v1.6.1/cert-manager.crds.yaml kubectl apply -f cert-manager.crds.yaml helm install \ cert-manager jetstack/cert-manager \ --namespace cert-manager \ --create-namespace \ --version v1.6.1 # alidns https://github.com/DEVmachine-fr/cert-manager-alidns-webhook helm repo add cert-manager-alidns-webhook https://devmachine-fr.github.io/cert-manager-alidns-webhook helm repo update helm install --namespace cert-manager alidns-webhook cert-manager-alidns-webhook/alidns-webhook helm template --namespace cert-manager alidns-webhook cert-manager-alidns-webhook/alidns-webhook kubectl create secret generic alidns-secrets --from-literal=&amp;quot;access-token=AccessKey ID&amp;quot; --from-literal=&amp;quot;secret-key=AccessKey Secret&amp;quot; 卸载 kubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces helm --namespace cert-manager delete cert-manager kubectl delete namespace cert-manager kubectl delete -f cert-manager.</description></item><item><title>Tars服务容器化</title><link>/cloud-native/tars%E5%AE%B9%E5%99%A8%E5%8C%96/</link><pubDate>Thu, 25 Nov 2021 13:30:16 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/tars%E5%AE%B9%E5%99%A8%E5%8C%96/</guid><description>tars容器化逻辑 tars 协议文件 module tars { struct AdapterConf{ 0 require string servant; 1 require string endpoint; 2 optional string protocol; 3 optional int maxConns; 4 optional int threadNum; 5 optional int queueCap; 6 optional int queueTimeout; }; struct onStartupReq{ 0 require string nodeName; 1 require string application; 2 require string server; 3 optional string setID; 4 optional vector&amp;lt;AdapterConf&amp;gt; adapters; 5 optional bool disableFlow; 6 optional string State = &amp;quot;active&amp;quot;; 7 optional string Version; 8 optional string templateName; 9 optional string serverType; }; struct onPrestopReq{ 0 require string nodeName; 1 optional string application; 2 optional string server; }; struct keepAliveReq{ 0 require string nodeName; 1 require string state; // inactive or active 2 optional string application; 3 optional string server; }; struct RegisterMetricsReq{ 0 require string nodeName; 1 require string application; 2 require string server; 3 require int metricsPort; }; struct GetMetricsAdaptersReq{ 0 optional map&amp;lt;string, string&amp;gt; filter; // enable in feature }; struct MetricsAdapterInfo{ 0 optional vector&amp;lt;string&amp;gt; targets; 1 optional map&amp;lt;string, string&amp;gt; labels; }; interface tarsregistry { void onStartup(onStartupReq req); void onPrestop(onPrestopReq req); void keepAlive(keepAliveReq req); void registerMetrics(RegisterMetricsReq req); void getMetricsAdapters(GetMetricsAdaptersReq req, out vector&amp;lt;MetricsAdapterInfo&amp;gt; rsp); }; }; onStartup -- 增加 t_node_info 记录	insert into t_node_info(node_name, node_obj, endpoint_ip, endpoint_port, last_reg_time, last_heartbeat, setting_state, present_state) values(?</description></item><item><title>云原生常用学习网址</title><link>/cloud-native/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%B8%B8%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/</link><pubDate>Tue, 23 Nov 2021 09:53:48 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%B8%B8%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/</guid><description>软件版本（孟老师的建议）
Go：1.17 Docker：20.10.8 K8s：1.22.0 Istio：1.9 服务器或本机环境配置要求：
本机如果能创建4核CPU 12G内存，30G磁盘的虚拟机就可以 如果用云主机建议类似配置，如果选择更小的服务器比如4C 8G，建议至少两台 如果更小的2C 4G服务器，至少三台 更小的服务器不适合 训练营所有示例代码，都放在孟凡杰老师的 Github：https://github.com/cncamp/golang Go 语言官网：https://golang.google.cn/dl/
下载并安装 Go 的编程工具：https://code.visualstudio.com/download
安装 Go 语言插件：https://marketplace.visualstudio.com/items?itemName=golang.go
下载并安装 Git Command Line：https://git-scm.com/downloads
从老师的 Github 上下载代码的命令行：git clone https://github.com/cncamp/golang.git Golang Playground（可以直接在网页里编写和运行 Go 语言程序）：https://play.golang.org/
国内可以访问的 Playground：https://goplay.tools/
Go 语言教程（Go Bible）：https://docs.hacknode.org/gopl-zh/ch1/ch1-01.html
Golang 调度原理：https://learnku.com/articles/41728
Go Channel 原理：https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html
Go Channel 原理（中文博客）：https://juejin.cn/post/6844904016254599176
Go 语言高性能 httpserver 代码实现细节：https://pouncing-waterfall-7c4.notion.site/http-server-socket-detail-e1f350d63c7c4d9f86ce140949bd90c2
模块二 K8s 日常运维代码调试场景案例（空指针）：https://github.com/kubernetes/kubernetes/pull/102229
模块二 K8s 日常运维代码调试场景案例（kube-proxy）：https://github.com/kubernetes/kubernetes/pull/79444
Makefiles 教程：https://makefiletutorial.com/
cgroupfs cgroup 和 systemd 有什么区别：https://www.codenong.com/cs109603870/</description></item><item><title>解决k8s相关组件安装镜像无法拉取</title><link>/cloud-native/k8s-install/</link><pubDate>Sat, 20 Nov 2021 17:18:16 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/k8s-install/</guid><description>替换阿里云 docker pull registry.aliyuncs.com/google_containers/ docker tag registry.aliyuncs.com/google_containers/ k8s.gcr.io/sig-storage/ docker rmi registry.aliyuncs.com/google_containers/ rook 镜像 docker pull registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 docker tag registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.3.0 docker rmi registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 docker pull registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0 docker tag registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0 k8s.gcr.io/sig-storage/csi-provisioner:v3.0.0 docker rmi registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0 docker pull registry.aliyuncs.com/google_containers/csi-resizer:v1.3.0 docker tag registry.aliyuncs.com/google_containers/csi-resizer:v1.3.0 k8s.gcr.io/sig-storage/csi-resizer:v1.3.0 docker rmi registry.aliyuncs.com/google_containers/csi-resizer:v1.3.0 docker pull registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0 docker tag registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0 k8s.gcr.io/sig-storage/csi-attacher:v3.3.0 docker rmi registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0 docker pull registry.aliyuncs.com/google_containers/csi-snapshotter:v4.2.0 docker tag registry.aliyuncs.com/google_containers/csi-snapshotter:v4.2.0 k8s.gcr.io/sig-storage/csi-snapshotter:v4.2.0 docker rmi registry.aliyuncs.com/google_containers/csi-snapshotter:v4.2.0 ingress-nginx 镜像 docker pull registry.aliyuncs.com/google_containers/nginx-ingress-controller:v1.0.0 docker tag registry.aliyuncs.com/google_containers/nginx-ingress-controller:v1.0.0 k8s.gcr.io/ingress-nginx/controller:v1.0.0 docker rmi registry.aliyuncs.com/google_containers/nginx-ingress-controller:v1.0.0 docker pull registry.</description></item><item><title>临时记录整理</title><link>/cloud-native/temp1/</link><pubDate>Sat, 20 Nov 2021 15:22:23 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/temp1/</guid><description>QCon大会演讲 Go Go程序员面试笔试宝典 https://github.com/golang-design/go-questions NoSay 理解 reflect elem 和 value 的一段测试代码 gorm 源码阅读之 callback gorm 源码阅读之 schema knew # https://krew.sigs.k8s.io/docs/user-guide/setup/install/ ( set -x; cd &amp;quot;$(mktemp -d)&amp;quot; &amp;amp;&amp;amp; OS=&amp;quot;$(uname | tr '[:upper:]' '[:lower:]')&amp;quot; &amp;amp;&amp;amp; ARCH=&amp;quot;$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')&amp;quot; &amp;amp;&amp;amp; KREW=&amp;quot;krew-${OS}_${ARCH}&amp;quot; &amp;amp;&amp;amp; curl -fsSLO &amp;quot;https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz&amp;quot; &amp;amp;&amp;amp; tar zxvf &amp;quot;${KREW}.tar.gz&amp;quot; &amp;amp;&amp;amp; ./&amp;quot;${KREW}&amp;quot; install krew ) export PATH=&amp;quot;${KREW_ROOT:-$HOME/.krew}/bin:$PATH&amp;quot; Java进阶实战 数据库 redis proxy: twemproxy
dbproxy: 小米Gaea、mycat、ShardingSphere
dts: maxwell、canal
MySQL HA: MMM | MHA | orchestrator | XenON | arksentinel | MGR | PXC</description></item><item><title>云原生临时记录</title><link>/cloud-native/temp/</link><pubDate>Sat, 20 Nov 2021 15:22:23 +0800</pubDate><author>lbbniu@gmail.com (lbbniu)</author><guid>/cloud-native/temp/</guid><description>Crane Crane-Colocation crane-full-capabilities 云原生 https://kubernetes.io/zh/docs/tasks/extend-kubectl/kubectl-plugins/ https://github.com/kubernetes/sample-cli-plugin https://mp.weixin.qq.com/s/r7RzGUuem1GPuKnLc8XEuw kubectl plugin https://krew.sigs.k8s.io/plugins/ 首先得出一个设计的proposal看下，包括原理，设计，代码结构，功能等 用插件扩展 kubectl 使用 Go 从零开发并发布一个 Kubectl 插件 https://github.com/kubernetes/sample-cli-plugin question 删除namespace为什么会Terminating？ kubectl get ns kubesphere-controls-system -o json | jq '.spec.finalizers=[]' &amp;gt; ns-without-finalizers.json cat ns-without-finalizers.json kubectl get ns kubesphere-monitoring-system -o json | jq '.metadata.finalizers=[]' &amp;gt; ns-without-finalizers.json cat ns-without-finalizers.json kubectl proxy &amp;amp; PID=$! curl -X PUT http://localhost:8001/api/v1/namespaces/kubesphere-monitoring-system/finalize -H &amp;quot;Content-Type: application/json&amp;quot; --data-binary @ns-without-finalizers.json kill $ID helm repo add gocrane https://finops-helm.pkg.coding.net/gocrane/gocrane helm repo add prometheus-community https://finops-helm.pkg.coding.net/gocrane/prometheus-community helm repo add grafana https://finops-helm.</description></item></channel></rss>